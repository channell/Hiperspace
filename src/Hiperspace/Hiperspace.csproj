<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>net8.0;net9.0</TargetFrameworks>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
    <Title>Hiperspace</Title>
    <Description>Base assembly of HiperSpaces</Description>
    <Copyright>Cepheis Ltd (C) 2023, 2024, 2025</Copyright>
    <PackageLicenseExpression>GPL-2.0-or-later</PackageLicenseExpression>
    <PackageRequireLicenseAcceptance>True</PackageRequireLicenseAcceptance>
    <PackageIcon>Hiper.png</PackageIcon>
    <PackageProjectUrl>https://www.cepheis.com/hiperspace/hiperspace</PackageProjectUrl>
    <PackageReadmeFile>readme.md</PackageReadmeFile>
    <Company>Cepheis</Company>
    <Authors>Stephen Channell</Authors>
    <AnalysisLevel>latest</AnalysisLevel>
    <RepositoryUrl>https://github.com/channell/Hiperspace</RepositoryUrl>
    <Nullable>enable</Nullable>
    <LangVersion>13.0</LangVersion>
    <PackageReleaseNotes>https://www.cepheis.com/hiperspace/20250505
# Overview
This release is concerned with asynchronous execution, particularly in a Blazor web-assembly environment where all IO must be async to avoid blocking the UI thread.  All Async functions now use underlying async functions rather that dispatching Tasks 

### HiperSpace 
`BatchBindAsync` and `GetAsync` now call the driver async functions

### Horizons
Horizon filters provide a mechanism to fine-grained access control, and context dependent filterning of content.  The most common filter is to provide logical `delete` to remove deleted elements from from read view, but present for update views.

Horizon now supports async filters for complex horizons that depend on other elements (that may need to be fetched over the network).

### KeyRef
`KeyRef&lt;&gt;` has the additional method `ValueAsync()` that will fetch a value asyncronously if needed (the value is cached for further reference)

### RefSet
`RefSet&lt;&gt;` has an additional method `AsAsyncEnumerable(CancellationToken cancellationToken)` that can be used to access elements asyncronously 

### RefSingle
`RefSingle&lt;&gt;` is a special case of KeyRef for aspects (optional one-of) that is bound to the woining element so that it cane be used like a property.  `ValueAsync()` has been added for async access.

### SetSpace
`SetSpace&lt;&gt;` has additional functions for Async (filter, insert, update, deletem, get) operations without blocking and `AsAsyncEnumerable(CancellationToken cancellationToken)` for asyncronous access to the full set

## Hilang
The language compiler for Hiperspace domain spaces has been updated to generate code that uses async interfaces

Additional functions are provided for async access to the properties that might require network IO.  e.g. 
```
entity Customer [Accounts : Account];
segment Account (...) {...};
```
will generate a storage element `CustomerAccounts` with a property `owner : Customer` to access the owner of the segment element.   `CustomerAccounts`  now has an `ownerAsync()` member that retrieves the custoemr asyncronously 

This release extends the `Hipperspace` model to better support streaming aggregation of Cube and viewing of aggregates part of graph view.  It also updated `SessionSpace` to use stream replication rather than Zip file compression.
</PackageReleaseNotes>
  </PropertyGroup>
  <ItemGroup>
    <None Include="..\Hiper.png">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.Bcl.HashCode" />
    <PackageReference Include="Nerdbank.GitVersioning">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="protobuf-net.Core" />
    <PackageReference Include="System.Numerics.Tensors" />
  </ItemGroup>
  <ItemGroup>
    <None Include="readme.md">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
  </ItemGroup>
</Project>