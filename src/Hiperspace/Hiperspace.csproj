<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
	<TargetFrameworks>net8.0</TargetFrameworks> 
	  <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
    <Title>Hiperspace</Title>
    <Description>Base assembly of HiperSpaces</Description>
    <Copyright>Cepheis Ltd (C) 2023</Copyright>
	<PackageReleaseNotes>
    ## ConcurentHashSet
    The hash map for set spaces has been updated to use concurrent hash map.
    This is needed for two scenarios
    1. Horizons filter cause additional elements to be loaded in a set space while it is being enumerated.
    2. Parallel scan for Node and Edge cause references to be loaded in thread order.

    This implementation of Concurent HashSet:
    * Provides locking around HashSet functions (using low-contention Spin Locks)
    * One or more HashSet segments that are locked for read while enumeration functions are running
    * Add / Remove / Replace / UnionAll operations are performed on the next segment to avoid mutation during enumeration
    * Any additions made (to next segment) are merged when the last enumeration has completed
    * Whole-set functions are deferred until enumerations has completed

    ## RockSpace disposal
    Internally the RocksDB Flush function uses async-io, that under heavy load can complete before pending IO, which blocks disposal of the connection. The RocksSpace driver has been updated to retry disposal to allow async IO to complete

    ## HiperSpace GetHorizons() function
    A common loading scenario is to use a SessionSpace to batch a set of additions to a domain space

    ```
    public void LoadingFunction (DomainSpace domain)
    {
    using (var session = new SessionSpace (new HeapSpace(), domain, SessionSpace.RollUpSeconds(1))))
    using (var loader = new DomainSpace(session))
    {
    ... load actions
    }
    }
    ```

    The `GetHorizons()` function allows `loader` to apply any domain Horizon filters.  This is especially useful in server configurations where role-based access control is applied to the source source transparently to the local function.

  </PackageReleaseNotes>
	<PackageLicenseExpression>GPL-2.0-or-later</PackageLicenseExpression>
	<PackageRequireLicenseAcceptance>True</PackageRequireLicenseAcceptance>
	<PackageIcon>Hiper.png</PackageIcon>
	<PackageProjectUrl>https://www.cepheis.com/hiperspace/hiperspace</PackageProjectUrl>
	<PackageReadmeFile>readme.md</PackageReadmeFile>
    <Company>Cepheis</Company>
    <Authors>Stephen Channell</Authors>
    <AnalysisLevel>latest</AnalysisLevel>
    <RepositoryUrl>https://github.com/channell/Hiperspace</RepositoryUrl>
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\Hiper.png">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
  </ItemGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.Bcl.HashCode" Version="1.1.1" />
		<PackageReference Include="protobuf-net" Version="3.2.30" />
		<PackageReference Include="Nerdbank.GitVersioning" Version="3.6.143">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
		<PackageReference Include="System.Numerics.Tensors" Version="8.0.0" />
	</ItemGroup>

	<ItemGroup>
	  <None Include="readme.md">
	    <Pack>True</Pack>
	    <PackagePath>\</PackagePath>
	  </None>
	</ItemGroup>
</Project>
