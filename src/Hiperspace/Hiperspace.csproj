<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>net8.0;net9.0</TargetFrameworks>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
    <Title>Hiperspace</Title>
    <Description>Base assembly of HiperSpaces</Description>
    <Copyright>Cepheis Ltd (C) 2023, 2024, 2025</Copyright>
    <PackageLicenseExpression>GPL-2.0-or-later</PackageLicenseExpression>
    <PackageRequireLicenseAcceptance>True</PackageRequireLicenseAcceptance>
    <PackageIcon>Hiper.png</PackageIcon>
    <PackageProjectUrl>https://www.cepheis.com/hiperspace/hiperspace</PackageProjectUrl>
    <PackageReadmeFile>readme.md</PackageReadmeFile>
    <Company>Cepheis</Company>
    <Authors>Stephen Channell</Authors>
    <AnalysisLevel>latest</AnalysisLevel>
    <RepositoryUrl>https://github.com/channell/Hiperspace</RepositoryUrl>
    <Nullable>enable</Nullable>
    <LangVersion>13.0</LangVersion>
    <PackageReleaseNotes>## Overview

**Hiperspace** is uses [protobuf](https://protobuf.dev/) wire-format to serialise **elements** in the domain **SubSpace**
for peristence is a *key/value* *(primarilly [RocksDB](https://rocksdb.org/))* with *minimal* transformation, and no padding.

The schema can evolve without the need to alter an historically, using two rules:
* #id numeric aliases for {entities, segments, aspects, keys, values, indexes} are never reused
* The datatype of {keys, values} are never changed (*other than by renaming items*)


### MetaModel

The `MetaModel` contains a list of all the *Element* types stored within a Hiperspace and the data types of each *key* 
and *value*.  The `MetaModel` is eternal - additional *Element* are added as tyhe schema changes, but never removed, to ensure that 
older build can still read the data that they understand.

When a **Hiperspace** is opened, the domain `MetaModel` is compared with the `MetaModel` stored in the **Hiperspace** to ensure the 
above rules have not been compromised.  All read and write after open uses the wire-format directly without transformation from store 
through to client application (including browser web-assembly).

### MetaMap

To support range access, the bytes in wire-format for keys are reordered to place message lengths at the end of the `byte[]` 
for each key.  This is especially important for *segments* (*where the parent knows only the `owner` part of the key, and *indexes*).

The `MetaMap` is an ordered array of #id and mapping of *key/value* #id to the element #id of references.  The `MetaMap` is coded 
in the domain assembly.  This release adds the capability to remove key references without the need to crerate a new element type, by 
regenerating the `MetaMap` from the `MetaModel` stored in **Hiperspace**.


### Change

This release changes the method signatures {`KeyPath`, `IndexPath`} to support a MetaMap built at load-time, and 
adds additional abstract methods to the `Hiperspace` to load and merge `MetaModel`.

The `MetaModelException` exception type has been added to provide detailed diagnostics, if the `MetaModel` is not compatible.
</PackageReleaseNotes>
  </PropertyGroup>
  <ItemGroup>
    <None Include="..\Hiper.png">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.Bcl.HashCode" />
    <PackageReference Include="Nerdbank.GitVersioning">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="protobuf-net.Core" />
    <PackageReference Include="System.Numerics.Tensors" />
  </ItemGroup>
  <ItemGroup>
    <None Include="readme.md">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
  </ItemGroup>
</Project>