%domain (ERP);
%function (unary, changed, ERP.ERPFunctions.Changed, Boolean);
%function (unary, changedLines, ERP.ERPFunctions.ChangedLines, Boolean);

entity ERP.Location.Address : Versioned
(
    Id              : Int32
)
{
    Street          : String,
    Town            : String,
    City            : String,
    County          : String,
    Country         : ERP.Location.Country,
    PostalCode      : String,
    Valid           = Country = null || PostalCode = null ? false : true
};

entity ERP.Location.Country : Versioned
(
    Id              : Int16
)
{
    Name            : String,
    ShippingCharge  : Decimal,
    Valid           = Name = null ? false : true
};

entity ERP.Location.Store : ERP.Location.Address
[
    StoreSales      : ERP.Sales.Order (Store = this)
];

entity ERP.Finance.Tarrif
(
    From            : ERP.Location.Country,
    To              : ERP.Location.Country
)
{
    Tax             : ERP.Finance.Tax,
    Valid           = From = null || To = null || Tax = null ? false : true
};

entity ERP.Finance.Tax : Versioned
(
    Id              : Int16
)
{
    Name            : String,
    Rate            : Decimal,
    Valid           = Name = null || Rate = null ? false : true
};

entity ERP.Finance.Shipping : Versioned
(
    From            : ERP.Location.Country,
    To              : ERP.Location.Country
)
{
    Fee             : Decimal,
    Valid           = From = null || To = null || Fee = null ? false : true
};

entity ERP.Products.Product : Versioned
(
    Id              : Int32
)
{
    Name            : String,
    Tax             : ERP.Finance.Tax,
    Supplier        : ERP.Client.Customer,
    Shipping        : Decimal,
    Valid           = Name = null ||Tax = null || Supplier = null || Shipping = null ? false : true
}
[
    Price           : ERP.Products.Price
];

aspect ERP.Products.Price : Versioned
{
    Name            : String,
    Sell            : Decimal,
    Buy             : Decimal,
    Valid           = Name = null || Sell = null || Buy = null ? false : true
};

entity ERP.Client.Customer : Versioned
(
    Id              : Int32
)
{
    Name            : String,
    BillTo          : ERP.Location.Address,
    ShipTo          : ERP.Location.Address,
    Valid           = Name = null || BillTo = null || BillTo.Valid = false || ShipTo = null || ShipTo.Valid = false ? false : true
}
[
    CustomerOrders  : ERP.Sales.Order  (Customer = this)
];

entity ERP.Sales.Salesperson
(
    Id              : Int16
)
{
    Name            : String,
    CommissionRate  = 0.0,
    Valid           = Name = null ? false : true
}
[
    Sales           : ERP.Sales.Order (Salesperson = this)
];

value ERP.Sales.OrderLine
(
    LineNumber      : Int16
)
{
    Product         : ERP.Products.Product,
    Units           : Decimal,
    Valid           = Product = null || Units = null ? false : true
}
[
    Price           = Product.Price.Sell * Units,
    Cost            = (Product.Price.Buy * Units) + Product.Shipping,
    Shipping        = Product.Shipping,
    Tax             = Product.Tax.Rate * Units
];

entity ERP.Sales.Order : Versioned
(
    OrderNumber     : Int32
)
{
    Customer        : ERP.Client.Customer,
    Store           : ERP.Location.Store,
    Salesperson     : ERP.Sales.Salesperson,
    Lines           : Set <ERP.Sales.OrderLine>,
    Invoiced        = Invoice = null ? true : false,
    _changeStore    = changed(Store) = true && Invoiced = true ? true : false,
    _changeLines    = changedLines(this) = true && Invoiced = true ? true : false,
    Valid           = Customer = null || Customer.Valid = false || changed(Customer) = true ||
                      Store = null || Store.Valid = null || _changeStore = true ||
                      count(Lines.LineNumber) = 0 || _changeLines = true
                      ? false : true
}
[
    Tariff          : ERP.Finance.Tarrif (From = Store.Country, To = Customer.BillTo.Country),
    Shipping        : ERP.Finance.Shipping (From = Store.Country, To = Customer.ShipTo.Country),

    Total           = sum (Lines.Price),
    ShippingCost    = Shipping = null ? sum (Lines.Shipping) : sum (Lines.Shipping) + max (Shipping.Fee),
    SalesTax        = sum (Lines.Tax),
    TariffTax       = Tariff = null ? 0.0 : max(Tariff.Tax.Rate) * Total,

    Bill            = Total + ShippingCost + SalesTax + TariffTax,

    Cost            = sum (Lines.Cost),
    Profit          = 0.0 + Total - Cost,

    Commission      = Salesperson = null ? 0.0 : Profit * Salesperson.CommissionRate,

    Invoice         : ERP.Sales.Invoice 
];
"
    Frozen value of order 
"
aspect ERP.Sales.Invoice 
{
    TaxDate         : DateTime,
    Total           : Decimal,
    ShippingCost    : Decimal,
    SalesTax        : Decimal,
    TariffTax       : Decimal,
    Cost            : Decimal,
    Profit          : Decimal,
    Commission      : Decimal
} 
[
    Bill            = 0.0 + Total + ShippingCost + SalesTax + TariffTax
];
