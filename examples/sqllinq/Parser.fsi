// Signature file for parser generated by fsyacc
module SQLLinq.Parser
type token = 
  | EOF
  | QUESTION
  | PERCENT
  | NOT_EQUAL
  | LESS_EQUAL
  | GREATER_EQUAL
  | GREATER
  | LESS
  | SLASH
  | MINUS
  | PLUS
  | STAR
  | SELECTSTAR
  | EQUAL
  | SEMI
  | INSELECT
  | DOT
  | COLON
  | COMMA
  | CLOSE_BRACKET
  | OPEN_BRACKET
  | STRING of (string)
  | ID of (string)
  | DECIMAL of (decimal)
  | FLOAT of (float)
  | INT of (int)
  | WHERE
  | UNION
  | TRUE
  | SUM
  | SELECT
  | ORDER
  | OR
  | ON
  | NULL
  | NOTEXISTS
  | NOT
  | MIN
  | MAX
  | LIMIT
  | LIKE
  | JOIN
  | ISNULL
  | ISNOTNULL
  | IN
  | HAVING
  | GROUP
  | FROM
  | FALSE
  | EXISTS
  | DOTSTAR
  | DISTINCT
  | DESC
  | COUNT
  | CONCAT
  | BY
  | BETWEEN
  | AVG
  | ASC
  | AS
  | AND
type tokenId = 
    | TOKEN_EOF
    | TOKEN_QUESTION
    | TOKEN_PERCENT
    | TOKEN_NOT_EQUAL
    | TOKEN_LESS_EQUAL
    | TOKEN_GREATER_EQUAL
    | TOKEN_GREATER
    | TOKEN_LESS
    | TOKEN_SLASH
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_STAR
    | TOKEN_SELECTSTAR
    | TOKEN_EQUAL
    | TOKEN_SEMI
    | TOKEN_INSELECT
    | TOKEN_DOT
    | TOKEN_COLON
    | TOKEN_COMMA
    | TOKEN_CLOSE_BRACKET
    | TOKEN_OPEN_BRACKET
    | TOKEN_STRING
    | TOKEN_ID
    | TOKEN_DECIMAL
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_WHERE
    | TOKEN_UNION
    | TOKEN_TRUE
    | TOKEN_SUM
    | TOKEN_SELECT
    | TOKEN_ORDER
    | TOKEN_OR
    | TOKEN_ON
    | TOKEN_NULL
    | TOKEN_NOTEXISTS
    | TOKEN_NOT
    | TOKEN_MIN
    | TOKEN_MAX
    | TOKEN_LIMIT
    | TOKEN_LIKE
    | TOKEN_JOIN
    | TOKEN_ISNULL
    | TOKEN_ISNOTNULL
    | TOKEN_IN
    | TOKEN_HAVING
    | TOKEN_GROUP
    | TOKEN_FROM
    | TOKEN_FALSE
    | TOKEN_EXISTS
    | TOKEN_DOTSTAR
    | TOKEN_DISTINCT
    | TOKEN_DESC
    | TOKEN_COUNT
    | TOKEN_CONCAT
    | TOKEN_BY
    | TOKEN_BETWEEN
    | TOKEN_AVG
    | TOKEN_ASC
    | TOKEN_AS
    | TOKEN_AND
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_statements
    | NONTERM_statement
    | NONTERM_select
    | NONTERM_subselect
    | NONTERM_name
    | NONTERM_column_list
    | NONTERM_column
    | NONTERM_from_list
    | NONTERM_where_expr
    | NONTERM_group_expr
    | NONTERM_order_expr
    | NONTERM_limit_expr
    | NONTERM_expression
    | NONTERM_boolean
    | NONTERM_inlist
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (Result) 
