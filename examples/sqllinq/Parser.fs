// Implementation file for parser generated by fsyacc
module SQLLinq.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


open SQLLinq.Ast

let Pos (parseState : FSharp.Text.Parsing.IParseState) = 
  let (startPos, endPos) = parseState.ResultRange
  {
    sl = startPos.pos_lnum + 1
    sc = startPos.pos_cnum - startPos.pos_bol + 1
    el = endPos.pos_lnum + 1
    ec = endPos.pos_cnum - endPos.pos_bol + 1
  }  
 

# 21 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | QUESTION
  | PERCENT
  | NOT_EQUAL
  | LESS_EQUAL
  | GREATER_EQUAL
  | GREATER
  | LESS
  | SLASH
  | MINUS
  | PLUS
  | STAR
  | SELECTSTAR
  | EQUAL
  | SEMI
  | INSELECT
  | DOT
  | COLON
  | COMMA
  | CLOSE_BRACKET
  | OPEN_BRACKET
  | STRING of (string)
  | ID of (string)
  | DECIMAL of (decimal)
  | FLOAT of (float)
  | INT of (int)
  | WHERE
  | UNION
  | TRUE
  | SUM
  | SELECT
  | ORDER
  | OR
  | ON
  | NULL
  | NOTEXISTS
  | NOT
  | MIN
  | MAX
  | LIMIT
  | LIKE
  | JOIN
  | ISNULL
  | ISNOTNULL
  | IN
  | HAVING
  | GROUP
  | FROM
  | FALSE
  | EXISTS
  | DOTSTAR
  | DISTINCT
  | DESC
  | COUNT
  | CONCAT
  | BY
  | BETWEEN
  | AVG
  | ASC
  | AS
  | AND
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_QUESTION
    | TOKEN_PERCENT
    | TOKEN_NOT_EQUAL
    | TOKEN_LESS_EQUAL
    | TOKEN_GREATER_EQUAL
    | TOKEN_GREATER
    | TOKEN_LESS
    | TOKEN_SLASH
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_STAR
    | TOKEN_SELECTSTAR
    | TOKEN_EQUAL
    | TOKEN_SEMI
    | TOKEN_INSELECT
    | TOKEN_DOT
    | TOKEN_COLON
    | TOKEN_COMMA
    | TOKEN_CLOSE_BRACKET
    | TOKEN_OPEN_BRACKET
    | TOKEN_STRING
    | TOKEN_ID
    | TOKEN_DECIMAL
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_WHERE
    | TOKEN_UNION
    | TOKEN_TRUE
    | TOKEN_SUM
    | TOKEN_SELECT
    | TOKEN_ORDER
    | TOKEN_OR
    | TOKEN_ON
    | TOKEN_NULL
    | TOKEN_NOTEXISTS
    | TOKEN_NOT
    | TOKEN_MIN
    | TOKEN_MAX
    | TOKEN_LIMIT
    | TOKEN_LIKE
    | TOKEN_JOIN
    | TOKEN_ISNULL
    | TOKEN_ISNOTNULL
    | TOKEN_IN
    | TOKEN_HAVING
    | TOKEN_GROUP
    | TOKEN_FROM
    | TOKEN_FALSE
    | TOKEN_EXISTS
    | TOKEN_DOTSTAR
    | TOKEN_DISTINCT
    | TOKEN_DESC
    | TOKEN_COUNT
    | TOKEN_CONCAT
    | TOKEN_BY
    | TOKEN_BETWEEN
    | TOKEN_AVG
    | TOKEN_ASC
    | TOKEN_AS
    | TOKEN_AND
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_statements
    | NONTERM_statement
    | NONTERM_select
    | NONTERM_subselect
    | NONTERM_name
    | NONTERM_column_list
    | NONTERM_column
    | NONTERM_from_list
    | NONTERM_where_expr
    | NONTERM_group_expr
    | NONTERM_order_expr
    | NONTERM_limit_expr
    | NONTERM_expression
    | NONTERM_boolean
    | NONTERM_inlist

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | QUESTION  -> 1 
  | PERCENT  -> 2 
  | NOT_EQUAL  -> 3 
  | LESS_EQUAL  -> 4 
  | GREATER_EQUAL  -> 5 
  | GREATER  -> 6 
  | LESS  -> 7 
  | SLASH  -> 8 
  | MINUS  -> 9 
  | PLUS  -> 10 
  | STAR  -> 11 
  | SELECTSTAR  -> 12 
  | EQUAL  -> 13 
  | SEMI  -> 14 
  | INSELECT  -> 15 
  | DOT  -> 16 
  | COLON  -> 17 
  | COMMA  -> 18 
  | CLOSE_BRACKET  -> 19 
  | OPEN_BRACKET  -> 20 
  | STRING _ -> 21 
  | ID _ -> 22 
  | DECIMAL _ -> 23 
  | FLOAT _ -> 24 
  | INT _ -> 25 
  | WHERE  -> 26 
  | UNION  -> 27 
  | TRUE  -> 28 
  | SUM  -> 29 
  | SELECT  -> 30 
  | ORDER  -> 31 
  | OR  -> 32 
  | ON  -> 33 
  | NULL  -> 34 
  | NOTEXISTS  -> 35 
  | NOT  -> 36 
  | MIN  -> 37 
  | MAX  -> 38 
  | LIMIT  -> 39 
  | LIKE  -> 40 
  | JOIN  -> 41 
  | ISNULL  -> 42 
  | ISNOTNULL  -> 43 
  | IN  -> 44 
  | HAVING  -> 45 
  | GROUP  -> 46 
  | FROM  -> 47 
  | FALSE  -> 48 
  | EXISTS  -> 49 
  | DOTSTAR  -> 50 
  | DISTINCT  -> 51 
  | DESC  -> 52 
  | COUNT  -> 53 
  | CONCAT  -> 54 
  | BY  -> 55 
  | BETWEEN  -> 56 
  | AVG  -> 57 
  | ASC  -> 58 
  | AS  -> 59 
  | AND  -> 60 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_QUESTION 
  | 2 -> TOKEN_PERCENT 
  | 3 -> TOKEN_NOT_EQUAL 
  | 4 -> TOKEN_LESS_EQUAL 
  | 5 -> TOKEN_GREATER_EQUAL 
  | 6 -> TOKEN_GREATER 
  | 7 -> TOKEN_LESS 
  | 8 -> TOKEN_SLASH 
  | 9 -> TOKEN_MINUS 
  | 10 -> TOKEN_PLUS 
  | 11 -> TOKEN_STAR 
  | 12 -> TOKEN_SELECTSTAR 
  | 13 -> TOKEN_EQUAL 
  | 14 -> TOKEN_SEMI 
  | 15 -> TOKEN_INSELECT 
  | 16 -> TOKEN_DOT 
  | 17 -> TOKEN_COLON 
  | 18 -> TOKEN_COMMA 
  | 19 -> TOKEN_CLOSE_BRACKET 
  | 20 -> TOKEN_OPEN_BRACKET 
  | 21 -> TOKEN_STRING 
  | 22 -> TOKEN_ID 
  | 23 -> TOKEN_DECIMAL 
  | 24 -> TOKEN_FLOAT 
  | 25 -> TOKEN_INT 
  | 26 -> TOKEN_WHERE 
  | 27 -> TOKEN_UNION 
  | 28 -> TOKEN_TRUE 
  | 29 -> TOKEN_SUM 
  | 30 -> TOKEN_SELECT 
  | 31 -> TOKEN_ORDER 
  | 32 -> TOKEN_OR 
  | 33 -> TOKEN_ON 
  | 34 -> TOKEN_NULL 
  | 35 -> TOKEN_NOTEXISTS 
  | 36 -> TOKEN_NOT 
  | 37 -> TOKEN_MIN 
  | 38 -> TOKEN_MAX 
  | 39 -> TOKEN_LIMIT 
  | 40 -> TOKEN_LIKE 
  | 41 -> TOKEN_JOIN 
  | 42 -> TOKEN_ISNULL 
  | 43 -> TOKEN_ISNOTNULL 
  | 44 -> TOKEN_IN 
  | 45 -> TOKEN_HAVING 
  | 46 -> TOKEN_GROUP 
  | 47 -> TOKEN_FROM 
  | 48 -> TOKEN_FALSE 
  | 49 -> TOKEN_EXISTS 
  | 50 -> TOKEN_DOTSTAR 
  | 51 -> TOKEN_DISTINCT 
  | 52 -> TOKEN_DESC 
  | 53 -> TOKEN_COUNT 
  | 54 -> TOKEN_CONCAT 
  | 55 -> TOKEN_BY 
  | 56 -> TOKEN_BETWEEN 
  | 57 -> TOKEN_AVG 
  | 58 -> TOKEN_ASC 
  | 59 -> TOKEN_AS 
  | 60 -> TOKEN_AND 
  | 63 -> TOKEN_end_of_input
  | 61 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_statements 
    | 3 -> NONTERM_statements 
    | 4 -> NONTERM_statements 
    | 5 -> NONTERM_statement 
    | 6 -> NONTERM_statement 
    | 7 -> NONTERM_select 
    | 8 -> NONTERM_subselect 
    | 9 -> NONTERM_subselect 
    | 10 -> NONTERM_subselect 
    | 11 -> NONTERM_subselect 
    | 12 -> NONTERM_name 
    | 13 -> NONTERM_name 
    | 14 -> NONTERM_name 
    | 15 -> NONTERM_column_list 
    | 16 -> NONTERM_column_list 
    | 17 -> NONTERM_column 
    | 18 -> NONTERM_column 
    | 19 -> NONTERM_column 
    | 20 -> NONTERM_from_list 
    | 21 -> NONTERM_from_list 
    | 22 -> NONTERM_from_list 
    | 23 -> NONTERM_from_list 
    | 24 -> NONTERM_from_list 
    | 25 -> NONTERM_where_expr 
    | 26 -> NONTERM_where_expr 
    | 27 -> NONTERM_group_expr 
    | 28 -> NONTERM_group_expr 
    | 29 -> NONTERM_group_expr 
    | 30 -> NONTERM_order_expr 
    | 31 -> NONTERM_order_expr 
    | 32 -> NONTERM_limit_expr 
    | 33 -> NONTERM_limit_expr 
    | 34 -> NONTERM_expression 
    | 35 -> NONTERM_expression 
    | 36 -> NONTERM_expression 
    | 37 -> NONTERM_expression 
    | 38 -> NONTERM_expression 
    | 39 -> NONTERM_expression 
    | 40 -> NONTERM_expression 
    | 41 -> NONTERM_expression 
    | 42 -> NONTERM_expression 
    | 43 -> NONTERM_expression 
    | 44 -> NONTERM_expression 
    | 45 -> NONTERM_expression 
    | 46 -> NONTERM_expression 
    | 47 -> NONTERM_expression 
    | 48 -> NONTERM_expression 
    | 49 -> NONTERM_expression 
    | 50 -> NONTERM_expression 
    | 51 -> NONTERM_expression 
    | 52 -> NONTERM_expression 
    | 53 -> NONTERM_expression 
    | 54 -> NONTERM_boolean 
    | 55 -> NONTERM_boolean 
    | 56 -> NONTERM_boolean 
    | 57 -> NONTERM_boolean 
    | 58 -> NONTERM_boolean 
    | 59 -> NONTERM_boolean 
    | 60 -> NONTERM_boolean 
    | 61 -> NONTERM_boolean 
    | 62 -> NONTERM_boolean 
    | 63 -> NONTERM_boolean 
    | 64 -> NONTERM_boolean 
    | 65 -> NONTERM_boolean 
    | 66 -> NONTERM_boolean 
    | 67 -> NONTERM_boolean 
    | 68 -> NONTERM_boolean 
    | 69 -> NONTERM_boolean 
    | 70 -> NONTERM_boolean 
    | 71 -> NONTERM_boolean 
    | 72 -> NONTERM_inlist 
    | 73 -> NONTERM_inlist 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 63 
let _fsyacc_tagOfErrorTerminal = 61

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | QUESTION  -> "QUESTION" 
  | PERCENT  -> "PERCENT" 
  | NOT_EQUAL  -> "NOT_EQUAL" 
  | LESS_EQUAL  -> "LESS_EQUAL" 
  | GREATER_EQUAL  -> "GREATER_EQUAL" 
  | GREATER  -> "GREATER" 
  | LESS  -> "LESS" 
  | SLASH  -> "SLASH" 
  | MINUS  -> "MINUS" 
  | PLUS  -> "PLUS" 
  | STAR  -> "STAR" 
  | SELECTSTAR  -> "SELECTSTAR" 
  | EQUAL  -> "EQUAL" 
  | SEMI  -> "SEMI" 
  | INSELECT  -> "INSELECT" 
  | DOT  -> "DOT" 
  | COLON  -> "COLON" 
  | COMMA  -> "COMMA" 
  | CLOSE_BRACKET  -> "CLOSE_BRACKET" 
  | OPEN_BRACKET  -> "OPEN_BRACKET" 
  | STRING _ -> "STRING" 
  | ID _ -> "ID" 
  | DECIMAL _ -> "DECIMAL" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 
  | WHERE  -> "WHERE" 
  | UNION  -> "UNION" 
  | TRUE  -> "TRUE" 
  | SUM  -> "SUM" 
  | SELECT  -> "SELECT" 
  | ORDER  -> "ORDER" 
  | OR  -> "OR" 
  | ON  -> "ON" 
  | NULL  -> "NULL" 
  | NOTEXISTS  -> "NOTEXISTS" 
  | NOT  -> "NOT" 
  | MIN  -> "MIN" 
  | MAX  -> "MAX" 
  | LIMIT  -> "LIMIT" 
  | LIKE  -> "LIKE" 
  | JOIN  -> "JOIN" 
  | ISNULL  -> "ISNULL" 
  | ISNOTNULL  -> "ISNOTNULL" 
  | IN  -> "IN" 
  | HAVING  -> "HAVING" 
  | GROUP  -> "GROUP" 
  | FROM  -> "FROM" 
  | FALSE  -> "FALSE" 
  | EXISTS  -> "EXISTS" 
  | DOTSTAR  -> "DOTSTAR" 
  | DISTINCT  -> "DISTINCT" 
  | DESC  -> "DESC" 
  | COUNT  -> "COUNT" 
  | CONCAT  -> "CONCAT" 
  | BY  -> "BY" 
  | BETWEEN  -> "BETWEEN" 
  | AVG  -> "AVG" 
  | ASC  -> "ASC" 
  | AS  -> "AS" 
  | AND  -> "AND" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | QUESTION  -> (null : System.Object) 
  | PERCENT  -> (null : System.Object) 
  | NOT_EQUAL  -> (null : System.Object) 
  | LESS_EQUAL  -> (null : System.Object) 
  | GREATER_EQUAL  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | SELECTSTAR  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | INSELECT  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | CLOSE_BRACKET  -> (null : System.Object) 
  | OPEN_BRACKET  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DECIMAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WHERE  -> (null : System.Object) 
  | UNION  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | SUM  -> (null : System.Object) 
  | SELECT  -> (null : System.Object) 
  | ORDER  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | ON  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | NOTEXISTS  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | MIN  -> (null : System.Object) 
  | MAX  -> (null : System.Object) 
  | LIMIT  -> (null : System.Object) 
  | LIKE  -> (null : System.Object) 
  | JOIN  -> (null : System.Object) 
  | ISNULL  -> (null : System.Object) 
  | ISNOTNULL  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | HAVING  -> (null : System.Object) 
  | GROUP  -> (null : System.Object) 
  | FROM  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | EXISTS  -> (null : System.Object) 
  | DOTSTAR  -> (null : System.Object) 
  | DISTINCT  -> (null : System.Object) 
  | DESC  -> (null : System.Object) 
  | COUNT  -> (null : System.Object) 
  | CONCAT  -> (null : System.Object) 
  | BY  -> (null : System.Object) 
  | BETWEEN  -> (null : System.Object) 
  | AVG  -> (null : System.Object) 
  | ASC  -> (null : System.Object) 
  | AS  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;2us;65535us;0us;2us;4us;5us;3us;65535us;0us;3us;4us;3us;7us;8us;4us;65535us;0us;6us;4us;6us;7us;6us;59us;60us;4us;65535us;9us;10us;149us;150us;153us;154us;160us;161us;38us;65535us;9us;129us;25us;129us;41us;42us;45us;129us;65us;129us;67us;129us;70us;129us;72us;129us;75us;129us;102us;129us;103us;129us;104us;129us;105us;129us;106us;129us;107us;129us;109us;129us;111us;129us;118us;129us;121us;129us;124us;129us;133us;129us;134us;129us;136us;129us;137us;129us;138us;129us;139us;129us;140us;129us;141us;129us;142us;129us;146us;129us;147us;129us;149us;129us;153us;129us;157us;129us;160us;129us;163us;129us;164us;129us;168us;129us;8us;65535us;9us;11us;25us;26us;45us;46us;70us;71us;75us;76us;149us;11us;153us;11us;160us;11us;8us;65535us;9us;44us;25us;44us;45us;44us;70us;44us;75us;44us;149us;44us;153us;44us;160us;44us;6us;65535us;12us;13us;19us;20us;27us;28us;34us;35us;56us;54us;64us;55us;4us;65535us;13us;14us;20us;21us;28us;29us;35us;36us;4us;65535us;14us;15us;21us;22us;29us;30us;36us;37us;4us;65535us;15us;16us;22us;23us;30us;31us;37us;38us;4us;65535us;16us;17us;23us;24us;31us;32us;38us;39us;37us;65535us;9us;47us;25us;47us;45us;47us;65us;91us;67us;91us;70us;47us;72us;91us;75us;47us;102us;79us;103us;80us;104us;81us;105us;82us;106us;83us;107us;84us;109us;85us;111us;86us;118us;87us;121us;88us;124us;89us;133us;90us;134us;91us;136us;92us;137us;93us;138us;94us;139us;95us;140us;96us;141us;97us;142us;98us;146us;91us;147us;91us;149us;47us;153us;47us;157us;101us;160us;47us;163us;99us;164us;100us;168us;101us;15us;65535us;9us;50us;25us;50us;45us;50us;65us;66us;67us;68us;70us;50us;72us;73us;75us;50us;107us;145us;134us;135us;146us;143us;147us;144us;149us;50us;153us;50us;160us;50us;2us;65535us;157us;158us;168us;169us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;6us;10us;15us;20us;59us;68us;77us;84us;89us;94us;99us;104us;142us;158us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;2us;3us;4us;1us;4us;1us;4us;2us;5us;6us;1us;6us;1us;6us;1us;7us;1us;7us;1us;8us;1us;8us;3us;8us;21us;24us;1us;8us;1us;8us;1us;8us;1us;8us;1us;9us;1us;9us;3us;9us;21us;24us;1us;9us;1us;9us;1us;9us;1us;9us;2us;10us;11us;1us;10us;1us;10us;3us;10us;21us;24us;1us;10us;1us;10us;1us;10us;1us;10us;1us;11us;1us;11us;3us;11us;21us;24us;1us;11us;1us;11us;1us;11us;1us;11us;3us;12us;13us;14us;1us;12us;1us;12us;1us;14us;2us;15us;16us;1us;16us;1us;16us;19us;17us;18us;34us;35us;36us;37us;53us;55us;56us;57us;58us;59us;60us;61us;66us;67us;68us;69us;70us;1us;17us;1us;17us;3us;19us;62us;63us;1us;19us;1us;19us;2us;20us;22us;3us;21us;21us;24us;3us;21us;24us;24us;1us;21us;1us;22us;1us;22us;1us;23us;1us;23us;1us;23us;1us;23us;1us;23us;1us;24us;1us;24us;3us;24us;62us;63us;1us;25us;3us;25us;62us;63us;2us;27us;28us;2us;27us;28us;2us;27us;28us;1us;27us;3us;27us;62us;63us;1us;30us;1us;30us;1us;30us;1us;32us;1us;32us;6us;34us;34us;35us;36us;37us;53us;6us;34us;35us;35us;36us;37us;53us;6us;34us;35us;36us;36us;37us;53us;6us;34us;35us;36us;37us;37us;53us;6us;34us;35us;36us;37us;38us;53us;18us;34us;35us;36us;37us;38us;53us;55us;56us;57us;58us;59us;60us;61us;66us;67us;68us;69us;70us;6us;34us;35us;36us;37us;39us;53us;6us;34us;35us;36us;37us;40us;53us;6us;34us;35us;36us;37us;43us;53us;6us;34us;35us;36us;37us;44us;53us;6us;34us;35us;36us;37us;45us;53us;6us;34us;35us;36us;37us;53us;53us;17us;34us;35us;36us;37us;53us;55us;56us;57us;58us;59us;60us;61us;66us;67us;68us;69us;70us;6us;34us;35us;36us;37us;53us;55us;6us;34us;35us;36us;37us;53us;56us;6us;34us;35us;36us;37us;53us;57us;6us;34us;35us;36us;37us;53us;58us;6us;34us;35us;36us;37us;53us;59us;6us;34us;35us;36us;37us;53us;60us;6us;34us;35us;36us;37us;53us;61us;6us;34us;35us;36us;37us;53us;68us;6us;34us;35us;36us;37us;53us;68us;7us;34us;35us;36us;37us;53us;72us;73us;1us;34us;1us;35us;1us;36us;1us;37us;1us;38us;2us;38us;71us;1us;38us;1us;39us;2us;40us;41us;2us;40us;41us;1us;40us;1us;41us;1us;41us;1us;42us;1us;42us;1us;43us;1us;43us;1us;43us;1us;44us;1us;44us;1us;44us;1us;45us;1us;45us;1us;45us;1us;46us;1us;47us;1us;48us;1us;49us;1us;50us;1us;51us;1us;52us;1us;53us;1us;54us;3us;54us;62us;63us;1us;55us;1us;56us;1us;57us;1us;58us;1us;59us;1us;60us;1us;61us;3us;62us;62us;63us;3us;62us;63us;63us;3us;62us;63us;71us;1us;62us;1us;63us;1us;64us;1us;64us;1us;64us;1us;64us;1us;65us;1us;65us;1us;65us;1us;65us;1us;66us;1us;66us;1us;66us;1us;66us;1us;67us;1us;67us;1us;67us;1us;68us;1us;68us;1us;69us;1us;70us;1us;71us;1us;73us;1us;73us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;9us;11us;13us;16us;18us;20us;22us;24us;26us;28us;32us;34us;36us;38us;40us;42us;44us;48us;50us;52us;54us;56us;59us;61us;63us;67us;69us;71us;73us;75us;77us;79us;83us;85us;87us;89us;91us;95us;97us;99us;101us;104us;106us;108us;128us;130us;132us;136us;138us;140us;143us;147us;151us;153us;155us;157us;159us;161us;163us;165us;167us;169us;171us;175us;177us;181us;184us;187us;190us;192us;196us;198us;200us;202us;204us;206us;213us;220us;227us;234us;241us;260us;267us;274us;281us;288us;295us;302us;320us;327us;334us;341us;348us;355us;362us;369us;376us;383us;391us;393us;395us;397us;399us;401us;404us;406us;408us;411us;414us;416us;418us;420us;422us;424us;426us;428us;430us;432us;434us;436us;438us;440us;442us;444us;446us;448us;450us;452us;454us;456us;458us;460us;464us;466us;468us;470us;472us;474us;476us;478us;482us;486us;490us;492us;494us;496us;498us;500us;502us;504us;506us;508us;510us;512us;514us;516us;518us;520us;522us;524us;526us;528us;530us;532us;534us;536us;|]
let _fsyacc_action_rows = 170
let _fsyacc_actionTableElements = [|1us;16386us;30us;9us;0us;49152us;0us;16385us;1us;16387us;14us;4us;1us;16386us;30us;9us;0us;16388us;1us;16389us;27us;7us;1us;32768us;30us;9us;0us;16390us;19us;32768us;11us;18us;17us;115us;20us;107us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;35us;152us;36us;134us;37us;120us;38us;123us;48us;132us;49us;148us;51us;25us;53us;110us;57us;117us;0us;16391us;1us;32768us;47us;12us;2us;32768us;20us;59us;22us;53us;3us;16410us;18us;56us;26us;67us;41us;64us;1us;16413us;46us;69us;1us;16415us;31us;74us;1us;16417us;39us;77us;0us;16392us;1us;32768us;47us;19us;2us;32768us;20us;59us;22us;53us;3us;16410us;18us;56us;26us;67us;41us;64us;1us;16413us;46us;69us;1us;16415us;31us;74us;1us;16417us;39us;77us;0us;16393us;18us;32768us;11us;33us;17us;115us;20us;107us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;35us;152us;36us;134us;37us;120us;38us;123us;48us;132us;49us;148us;53us;110us;57us;117us;1us;32768us;47us;27us;2us;32768us;20us;59us;22us;53us;3us;16410us;18us;56us;26us;67us;41us;64us;1us;16413us;46us;69us;1us;16415us;31us;74us;1us;16417us;39us;77us;0us;16394us;1us;32768us;47us;34us;2us;32768us;20us;59us;22us;53us;3us;16410us;18us;56us;26us;67us;41us;64us;1us;16413us;46us;69us;1us;16415us;31us;74us;1us;16417us;39us;77us;0us;16395us;2us;16397us;16us;41us;50us;43us;1us;32768us;22us;40us;0us;16396us;0us;16398us;1us;16399us;18us;45us;17us;32768us;17us;115us;20us;107us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;35us;152us;36us;134us;37us;120us;38us;123us;48us;132us;49us;148us;53us;110us;57us;117us;0us;16400us;18us;16402us;3us;142us;4us;139us;5us;140us;6us;138us;7us;136us;8us;103us;9us;105us;10us;104us;11us;102us;13us;141us;15us;160us;40us;137us;42us;165us;43us;166us;44us;156us;54us;133us;56us;163us;59us;48us;1us;32768us;22us;49us;0us;16401us;3us;32768us;32us;147us;59us;51us;60us;146us;1us;32768us;22us;52us;0us;16403us;1us;16404us;59us;57us;0us;16405us;3us;32768us;18us;56us;33us;65us;41us;64us;2us;32768us;20us;59us;22us;53us;1us;32768us;22us;58us;0us;16406us;1us;32768us;30us;9us;1us;32768us;19us;61us;1us;32768us;59us;62us;1us;32768us;22us;63us;0us;16407us;2us;32768us;20us;59us;22us;53us;17us;32768us;17us;115us;20us;107us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;35us;152us;36us;134us;37us;120us;38us;123us;48us;132us;49us;148us;53us;110us;57us;117us;2us;16408us;32us;147us;60us;146us;17us;32768us;17us;115us;20us;107us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;35us;152us;36us;134us;37us;120us;38us;123us;48us;132us;49us;148us;53us;110us;57us;117us;2us;16409us;32us;147us;60us;146us;1us;32768us;55us;70us;17us;32768us;17us;115us;20us;107us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;35us;152us;36us;134us;37us;120us;38us;123us;48us;132us;49us;148us;53us;110us;57us;117us;1us;16412us;45us;72us;17us;32768us;17us;115us;20us;107us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;35us;152us;36us;134us;37us;120us;38us;123us;48us;132us;49us;148us;53us;110us;57us;117us;2us;16411us;32us;147us;60us;146us;1us;32768us;55us;75us;17us;32768us;17us;115us;20us;107us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;35us;152us;36us;134us;37us;120us;38us;123us;48us;132us;49us;148us;53us;110us;57us;117us;0us;16414us;1us;32768us;25us;78us;0us;16416us;1us;16418us;54us;133us;1us;16419us;54us;133us;3us;16420us;8us;103us;11us;102us;54us;133us;3us;16421us;8us;103us;11us;102us;54us;133us;6us;32768us;8us;103us;9us;105us;10us;104us;11us;102us;19us;108us;54us;133us;18us;32768us;3us;142us;4us;139us;5us;140us;6us;138us;7us;136us;8us;103us;9us;105us;10us;104us;11us;102us;13us;141us;15us;160us;19us;108us;40us;137us;42us;165us;43us;166us;44us;156us;54us;133us;56us;163us;1us;16423us;54us;133us;6us;32768us;8us;103us;9us;105us;10us;104us;11us;102us;19us;112us;54us;133us;6us;32768us;8us;103us;9us;105us;10us;104us;11us;102us;19us;119us;54us;133us;6us;32768us;8us;103us;9us;105us;10us;104us;11us;102us;19us;122us;54us;133us;6us;32768us;8us;103us;9us;105us;10us;104us;11us;102us;19us;125us;54us;133us;1us;16437us;54us;133us;17us;32768us;3us;142us;4us;139us;5us;140us;6us;138us;7us;136us;8us;103us;9us;105us;10us;104us;11us;102us;13us;141us;15us;160us;40us;137us;42us;165us;43us;166us;44us;156us;54us;133us;56us;163us;5us;16439us;8us;103us;9us;105us;10us;104us;11us;102us;54us;133us;5us;16440us;8us;103us;9us;105us;10us;104us;11us;102us;54us;133us;5us;16441us;8us;103us;9us;105us;10us;104us;11us;102us;54us;133us;5us;16442us;8us;103us;9us;105us;10us;104us;11us;102us;54us;133us;5us;16443us;8us;103us;9us;105us;10us;104us;11us;102us;54us;133us;5us;16444us;8us;103us;9us;105us;10us;104us;11us;102us;54us;133us;5us;16445us;8us;103us;9us;105us;10us;104us;11us;102us;54us;133us;6us;32768us;8us;103us;9us;105us;10us;104us;11us;102us;54us;133us;60us;164us;5us;16452us;8us;103us;9us;105us;10us;104us;11us;102us;54us;133us;6us;16456us;8us;103us;9us;105us;10us;104us;11us;102us;18us;168us;54us;133us;14us;32768us;17us;115us;20us;106us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;37us;120us;38us;123us;48us;132us;53us;110us;57us;117us;14us;32768us;17us;115us;20us;106us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;37us;120us;38us;123us;48us;132us;53us;110us;57us;117us;14us;32768us;17us;115us;20us;106us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;37us;120us;38us;123us;48us;132us;53us;110us;57us;117us;14us;32768us;17us;115us;20us;106us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;37us;120us;38us;123us;48us;132us;53us;110us;57us;117us;14us;32768us;17us;115us;20us;106us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;37us;120us;38us;123us;48us;132us;53us;110us;57us;117us;17us;32768us;17us;115us;20us;107us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;35us;152us;36us;134us;37us;120us;38us;123us;48us;132us;49us;148us;53us;110us;57us;117us;0us;16422us;14us;32768us;17us;115us;20us;106us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;37us;120us;38us;123us;48us;132us;53us;110us;57us;117us;1us;32768us;20us;111us;15us;32768us;11us;113us;17us;115us;20us;106us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;37us;120us;38us;123us;48us;132us;53us;110us;57us;117us;0us;16424us;1us;32768us;19us;114us;0us;16425us;1us;32768us;22us;116us;0us;16426us;1us;32768us;20us;118us;14us;32768us;17us;115us;20us;106us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;37us;120us;38us;123us;48us;132us;53us;110us;57us;117us;0us;16427us;1us;32768us;20us;121us;14us;32768us;17us;115us;20us;106us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;37us;120us;38us;123us;48us;132us;53us;110us;57us;117us;0us;16428us;1us;32768us;20us;124us;14us;32768us;17us;115us;20us;106us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;37us;120us;38us;123us;48us;132us;53us;110us;57us;117us;0us;16429us;0us;16430us;0us;16431us;0us;16432us;0us;16433us;0us;16434us;0us;16435us;0us;16436us;14us;32768us;17us;115us;20us;106us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;37us;120us;38us;123us;48us;132us;53us;110us;57us;117us;17us;32768us;17us;115us;20us;107us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;35us;152us;36us;134us;37us;120us;38us;123us;48us;132us;49us;148us;53us;110us;57us;117us;0us;16438us;14us;32768us;17us;115us;20us;106us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;37us;120us;38us;123us;48us;132us;53us;110us;57us;117us;14us;32768us;17us;115us;20us;106us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;37us;120us;38us;123us;48us;132us;53us;110us;57us;117us;14us;32768us;17us;115us;20us;106us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;37us;120us;38us;123us;48us;132us;53us;110us;57us;117us;14us;32768us;17us;115us;20us;106us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;37us;120us;38us;123us;48us;132us;53us;110us;57us;117us;14us;32768us;17us;115us;20us;106us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;37us;120us;38us;123us;48us;132us;53us;110us;57us;117us;14us;32768us;17us;115us;20us;106us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;37us;120us;38us;123us;48us;132us;53us;110us;57us;117us;14us;32768us;17us;115us;20us;106us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;37us;120us;38us;123us;48us;132us;53us;110us;57us;117us;0us;16446us;0us;16447us;3us;32768us;19us;167us;32us;147us;60us;146us;17us;32768us;17us;115us;20us;107us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;35us;152us;36us;134us;37us;120us;38us;123us;48us;132us;49us;148us;53us;110us;57us;117us;17us;32768us;17us;115us;20us;107us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;35us;152us;36us;134us;37us;120us;38us;123us;48us;132us;49us;148us;53us;110us;57us;117us;1us;32768us;20us;149us;19us;32768us;11us;18us;17us;115us;20us;107us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;35us;152us;36us;134us;37us;120us;38us;123us;48us;132us;49us;148us;51us;25us;53us;110us;57us;117us;1us;32768us;19us;151us;0us;16448us;1us;32768us;20us;153us;19us;32768us;11us;18us;17us;115us;20us;107us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;35us;152us;36us;134us;37us;120us;38us;123us;48us;132us;49us;148us;51us;25us;53us;110us;57us;117us;1us;32768us;19us;155us;0us;16449us;1us;32768us;20us;157us;14us;32768us;17us;115us;20us;106us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;37us;120us;38us;123us;48us;132us;53us;110us;57us;117us;1us;32768us;19us;159us;0us;16450us;19us;32768us;11us;18us;17us;115us;20us;107us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;35us;152us;36us;134us;37us;120us;38us;123us;48us;132us;49us;148us;51us;25us;53us;110us;57us;117us;1us;32768us;19us;162us;0us;16451us;14us;32768us;17us;115us;20us;106us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;37us;120us;38us;123us;48us;132us;53us;110us;57us;117us;14us;32768us;17us;115us;20us;106us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;37us;120us;38us;123us;48us;132us;53us;110us;57us;117us;0us;16453us;0us;16454us;0us;16455us;14us;32768us;17us;115us;20us;106us;21us;130us;22us;40us;23us;128us;24us;127us;25us;126us;28us;131us;29us;109us;37us;120us;38us;123us;48us;132us;53us;110us;57us;117us;0us;16457us;|]
let _fsyacc_actionTableRowOffsets = [|0us;2us;3us;4us;6us;8us;9us;11us;13us;14us;34us;35us;37us;40us;44us;46us;48us;50us;51us;53us;56us;60us;62us;64us;66us;67us;86us;88us;91us;95us;97us;99us;101us;102us;104us;107us;111us;113us;115us;117us;118us;121us;123us;124us;125us;127us;145us;146us;165us;167us;168us;172us;174us;175us;177us;178us;182us;185us;187us;188us;190us;192us;194us;196us;197us;200us;218us;221us;239us;242us;244us;262us;264us;282us;285us;287us;305us;306us;308us;309us;311us;313us;317us;321us;328us;347us;349us;356us;363us;370us;377us;379us;397us;403us;409us;415us;421us;427us;433us;439us;446us;452us;459us;474us;489us;504us;519us;534us;552us;553us;568us;570us;586us;587us;589us;590us;592us;593us;595us;610us;611us;613us;628us;629us;631us;646us;647us;648us;649us;650us;651us;652us;653us;654us;669us;687us;688us;703us;718us;733us;748us;763us;778us;793us;794us;795us;799us;817us;835us;837us;857us;859us;860us;862us;882us;884us;885us;887us;902us;904us;905us;925us;927us;928us;943us;958us;959us;960us;961us;976us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;0us;1us;3us;1us;3us;2us;7us;7us;8us;8us;3us;1us;2us;1us;3us;3us;1us;3us;1us;3us;3us;5us;5us;2us;0us;5us;3us;0us;3us;0us;2us;0us;3us;3us;3us;3us;3us;2us;4us;4us;2us;4us;4us;4us;1us;1us;1us;1us;1us;1us;1us;3us;2us;3us;3us;3us;3us;3us;3us;3us;3us;3us;4us;4us;5us;4us;5us;2us;2us;3us;1us;3us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;2us;3us;3us;4us;5us;5us;5us;5us;6us;6us;6us;7us;7us;8us;8us;8us;9us;9us;9us;9us;9us;10us;10us;11us;11us;11us;12us;12us;13us;13us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;15us;15us;15us;15us;15us;15us;15us;15us;15us;15us;15us;15us;15us;15us;15us;15us;15us;15us;16us;16us;|]
let _fsyacc_immediateActions = [|65535us;49152us;16385us;65535us;65535us;16388us;65535us;65535us;16390us;65535us;16391us;65535us;65535us;65535us;65535us;65535us;65535us;16392us;65535us;65535us;65535us;65535us;65535us;65535us;16393us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16394us;65535us;65535us;65535us;65535us;65535us;65535us;16395us;65535us;65535us;16396us;16398us;65535us;65535us;16400us;65535us;65535us;16401us;65535us;65535us;16403us;65535us;65535us;65535us;65535us;65535us;16406us;65535us;65535us;65535us;65535us;16407us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16414us;65535us;16416us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16422us;65535us;65535us;65535us;16424us;65535us;16425us;65535us;16426us;65535us;65535us;16427us;65535us;65535us;16428us;65535us;65535us;16429us;16430us;16431us;16432us;16433us;16434us;16435us;16436us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16448us;65535us;65535us;65535us;16449us;65535us;65535us;65535us;16450us;65535us;65535us;16451us;65535us;65535us;16453us;16454us;16455us;65535us;16457us;|]
let _fsyacc_reductions = lazy [|
# 525 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Result in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 534 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_statements in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                                           Result.Create _1 
                   )
# 96 "Parser.fsy"
                 : Result));
# 545 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                                           [] 
                   )
# 99 "Parser.fsy"
                 : 'gentype_statements));
# 555 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                                           [_1] 
                   )
# 100 "Parser.fsy"
                 : 'gentype_statements));
# 566 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_statement in
            let _3 = parseState.GetInput(3) :?> 'gentype_statements in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                                           _1 :: _3 
                   )
# 101 "Parser.fsy"
                 : 'gentype_statements));
# 578 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_select in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                                           Select _1 
                   )
# 104 "Parser.fsy"
                 : 'gentype_statement));
# 589 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_select in
            let _3 = parseState.GetInput(3) :?> 'gentype_statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                                           Union (_1 , _3) 
                   )
# 105 "Parser.fsy"
                 : 'gentype_statement));
# 601 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_subselect in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                                           _2 
                   )
# 108 "Parser.fsy"
                 : 'gentype_select));
# 612 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_column_list in
            let _3 = parseState.GetInput(3) :?> 'gentype_from_list in
            let _4 = parseState.GetInput(4) :?> 'gentype_where_expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_group_expr in
            let _6 = parseState.GetInput(6) :?> 'gentype_order_expr in
            let _7 = parseState.GetInput(7) :?> 'gentype_limit_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                           
                           {
                             Columns = _1
                             From = _3
                             Where = _4
                             GroupBy = _5
                             OrderBy = _6
                             Limit = _7
                             Distinct = false
                             Position = (Pos parseState)
                           }
                         
                   )
# 111 "Parser.fsy"
                 : 'gentype_subselect));
# 639 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_from_list in
            let _4 = parseState.GetInput(4) :?> 'gentype_where_expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_group_expr in
            let _6 = parseState.GetInput(6) :?> 'gentype_order_expr in
            let _7 = parseState.GetInput(7) :?> 'gentype_limit_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                           
                           {
                             Columns = []
                             From = _3
                             Where = _4
                             GroupBy = _5
                             OrderBy = _6
                             Limit = _7
                             Distinct = false
                             Position = (Pos parseState)
                           }
                         
                   )
# 125 "Parser.fsy"
                 : 'gentype_subselect));
# 665 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_column_list in
            let _4 = parseState.GetInput(4) :?> 'gentype_from_list in
            let _5 = parseState.GetInput(5) :?> 'gentype_where_expr in
            let _6 = parseState.GetInput(6) :?> 'gentype_group_expr in
            let _7 = parseState.GetInput(7) :?> 'gentype_order_expr in
            let _8 = parseState.GetInput(8) :?> 'gentype_limit_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsy"
                           
                           {
                             Columns = _2
                             From = _4
                             Where = _5
                             GroupBy = _6
                             OrderBy = _7
                             Limit = _8
                             Distinct = true
                             Position = (Pos parseState)
                           }
                         
                   )
# 139 "Parser.fsy"
                 : 'gentype_subselect));
# 692 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _4 = parseState.GetInput(4) :?> 'gentype_from_list in
            let _5 = parseState.GetInput(5) :?> 'gentype_where_expr in
            let _6 = parseState.GetInput(6) :?> 'gentype_group_expr in
            let _7 = parseState.GetInput(7) :?> 'gentype_order_expr in
            let _8 = parseState.GetInput(8) :?> 'gentype_limit_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "Parser.fsy"
                           
                           {
                             Columns = []
                             From = _4
                             Where = _5
                             GroupBy = _6
                             OrderBy = _7
                             Limit = _8
                             Distinct = true
                             Position = (Pos parseState)
                           }
                         
                   )
# 153 "Parser.fsy"
                 : 'gentype_subselect));
# 718 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_name in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "Parser.fsy"
                           _1 :: _3 
                   )
# 168 "Parser.fsy"
                 : 'gentype_name));
# 730 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "Parser.fsy"
                           [_1] 
                   )
# 171 "Parser.fsy"
                 : 'gentype_name));
# 741 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "Parser.fsy"
                        [_1; "*"] 
                   )
# 174 "Parser.fsy"
                 : 'gentype_name));
# 752 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_column in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "Parser.fsy"
                           [_1] 
                   )
# 178 "Parser.fsy"
                 : 'gentype_column_list));
# 763 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_column in
            let _3 = parseState.GetInput(3) :?> 'gentype_column_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "Parser.fsy"
                           _1 :: _3 
                   )
# 181 "Parser.fsy"
                 : 'gentype_column_list));
# 775 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "Parser.fsy"
                           
                           {
                             Expression = _1
                             Alias = Some _3
                             Position = (Pos parseState) 
                           }
                         
                   )
# 185 "Parser.fsy"
                 : 'gentype_column));
# 793 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "Parser.fsy"
                           
                           {
                             Expression = _1
                             Alias = None
                             Position = (Pos parseState) 
                           }
                         
                   )
# 194 "Parser.fsy"
                 : 'gentype_column));
# 810 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_boolean in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "Parser.fsy"
                           
                           {
                             Expression = Boolean _1
                             Alias = Some _3
                             Position = (Pos parseState) 
                           }
                         
                   )
# 203 "Parser.fsy"
                 : 'gentype_column));
# 828 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 213 "Parser.fsy"
                           Table {
                             Name  = _1
                             Alias = None
                             Set = None
                             Subject = None
                             SubQuery = None
                             Position = (Pos parseState) 
                           }
                         
                   )
# 213 "Parser.fsy"
                 : 'gentype_from_list));
# 847 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_from_list in
            let _3 = parseState.GetInput(3) :?> 'gentype_from_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 224 "Parser.fsy"
                           Product (_1, _3) 
                   )
# 224 "Parser.fsy"
                 : 'gentype_from_list));
# 859 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 227 "Parser.fsy"
                           Table {
                             Name  = _1                    
                             Alias = Some _3
                             Set = None
                             Subject = None
                             SubQuery = None
                             Position = (Pos parseState) 
                           }
                         
                   )
# 227 "Parser.fsy"
                 : 'gentype_from_list));
# 879 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_select in
            let _5 = parseState.GetInput(5) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 238 "Parser.fsy"
                           SubQuery (_2, _5) 
                   )
# 238 "Parser.fsy"
                 : 'gentype_from_list));
# 891 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_from_list in
            let _3 = parseState.GetInput(3) :?> 'gentype_from_list in
            let _5 = parseState.GetInput(5) :?> 'gentype_boolean in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 241 "Parser.fsy"
                           Join (_1, _3, _5) 
                   )
# 241 "Parser.fsy"
                 : 'gentype_from_list));
# 904 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_boolean in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 245 "Parser.fsy"
                           Some _2 
                   )
# 245 "Parser.fsy"
                 : 'gentype_where_expr));
# 915 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 248 "Parser.fsy"
                           None 
                   )
# 248 "Parser.fsy"
                 : 'gentype_where_expr));
# 925 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_column_list in
            let _5 = parseState.GetInput(5) :?> 'gentype_boolean in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 252 "Parser.fsy"
                           
                           Some {
                             Columns = _3
                             Having = Some _5
                             Position = (Pos parseState) 
                           }
                         
                   )
# 252 "Parser.fsy"
                 : 'gentype_group_expr));
# 943 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_column_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 261 "Parser.fsy"
                           
                           Some {
                             Columns = _3
                             Having = None
                             Position = (Pos parseState) 
                           }
                         
                   )
# 261 "Parser.fsy"
                 : 'gentype_group_expr));
# 960 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 270 "Parser.fsy"
                           None 
                   )
# 270 "Parser.fsy"
                 : 'gentype_group_expr));
# 970 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_column_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 274 "Parser.fsy"
                           _3 
                   )
# 274 "Parser.fsy"
                 : 'gentype_order_expr));
# 981 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 277 "Parser.fsy"
                           [] 
                   )
# 277 "Parser.fsy"
                 : 'gentype_order_expr));
# 991 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 281 "Parser.fsy"
                           Some _2 
                   )
# 281 "Parser.fsy"
                 : 'gentype_limit_expr));
# 1002 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 284 "Parser.fsy"
                           None 
                   )
# 284 "Parser.fsy"
                 : 'gentype_limit_expr));
# 1012 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 287 "Parser.fsy"
                                                                           Mul (_1, _3) 
                   )
# 287 "Parser.fsy"
                 : 'gentype_expression));
# 1024 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 288 "Parser.fsy"
                                                                           Div (_1, _3) 
                   )
# 288 "Parser.fsy"
                 : 'gentype_expression));
# 1036 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 289 "Parser.fsy"
                                                                           Add (_1, _3) 
                   )
# 289 "Parser.fsy"
                 : 'gentype_expression));
# 1048 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 290 "Parser.fsy"
                                                                           Sub (_1, _3) 
                   )
# 290 "Parser.fsy"
                 : 'gentype_expression));
# 1060 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 291 "Parser.fsy"
                                                                           _2 
                   )
# 291 "Parser.fsy"
                 : 'gentype_expression));
# 1071 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 292 "Parser.fsy"
                                                                           Sum _2 
                   )
# 292 "Parser.fsy"
                 : 'gentype_expression));
# 1082 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 293 "Parser.fsy"
                                                                           Count _3 
                   )
# 293 "Parser.fsy"
                 : 'gentype_expression));
# 1093 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 294 "Parser.fsy"
                                                                           CountStar 
                   )
# 294 "Parser.fsy"
                 : 'gentype_expression));
# 1103 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 295 "Parser.fsy"
                                                                           Param (_2, None) 
                   )
# 295 "Parser.fsy"
                 : 'gentype_expression));
# 1114 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 296 "Parser.fsy"
                                                                           Avg _3 
                   )
# 296 "Parser.fsy"
                 : 'gentype_expression));
# 1125 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 297 "Parser.fsy"
                                                                           Min _3 
                   )
# 297 "Parser.fsy"
                 : 'gentype_expression));
# 1136 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 298 "Parser.fsy"
                                                                           Max _3 
                   )
# 298 "Parser.fsy"
                 : 'gentype_expression));
# 1147 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 299 "Parser.fsy"
                                                                           Int _1 
                   )
# 299 "Parser.fsy"
                 : 'gentype_expression));
# 1158 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> float in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 300 "Parser.fsy"
                                                                           Num _1 
                   )
# 300 "Parser.fsy"
                 : 'gentype_expression));
# 1169 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> decimal in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 301 "Parser.fsy"
                                                                           Dec _1 
                   )
# 301 "Parser.fsy"
                 : 'gentype_expression));
# 1180 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_name in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 302 "Parser.fsy"
                                                                           Ref (Name.Create _1 (Pos parseState))
                   )
# 302 "Parser.fsy"
                 : 'gentype_expression));
# 1191 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 303 "Parser.fsy"
                                                                           Str _1 
                   )
# 303 "Parser.fsy"
                 : 'gentype_expression));
# 1202 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 304 "Parser.fsy"
                                                                           Bool true 
                   )
# 304 "Parser.fsy"
                 : 'gentype_expression));
# 1212 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 305 "Parser.fsy"
                                                                           Bool false 
                   )
# 305 "Parser.fsy"
                 : 'gentype_expression));
# 1222 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 306 "Parser.fsy"
                                                                           Concat (_1, _3) 
                   )
# 306 "Parser.fsy"
                 : 'gentype_expression));
# 1234 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_boolean in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 309 "Parser.fsy"
                                                                           Not _2 
                   )
# 309 "Parser.fsy"
                 : 'gentype_boolean));
# 1245 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 310 "Parser.fsy"
                                                                           Less (_1, _3) 
                   )
# 310 "Parser.fsy"
                 : 'gentype_boolean));
# 1257 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 311 "Parser.fsy"
                                                                           Like (_1, _3) 
                   )
# 311 "Parser.fsy"
                 : 'gentype_boolean));
# 1269 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 312 "Parser.fsy"
                                                                           Greater (_1, _3) 
                   )
# 312 "Parser.fsy"
                 : 'gentype_boolean));
# 1281 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 313 "Parser.fsy"
                                                                           LessEqual (_1, _3) 
                   )
# 313 "Parser.fsy"
                 : 'gentype_boolean));
# 1293 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 314 "Parser.fsy"
                                                                           GreaterEqual (_1, _3) 
                   )
# 314 "Parser.fsy"
                 : 'gentype_boolean));
# 1305 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 315 "Parser.fsy"
                                                                           Equal (_1, _3) 
                   )
# 315 "Parser.fsy"
                 : 'gentype_boolean));
# 1317 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 316 "Parser.fsy"
                                                                           NotEqual (_1, _3) 
                   )
# 316 "Parser.fsy"
                 : 'gentype_boolean));
# 1329 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_boolean in
            let _3 = parseState.GetInput(3) :?> 'gentype_boolean in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 317 "Parser.fsy"
                                                                           And (_1, _3) 
                   )
# 317 "Parser.fsy"
                 : 'gentype_boolean));
# 1341 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_boolean in
            let _3 = parseState.GetInput(3) :?> 'gentype_boolean in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 318 "Parser.fsy"
                                                                           Or (_1, _3) 
                   )
# 318 "Parser.fsy"
                 : 'gentype_boolean));
# 1353 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_subselect in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 319 "Parser.fsy"
                                                                           Exists _3 
                   )
# 319 "Parser.fsy"
                 : 'gentype_boolean));
# 1364 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_subselect in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 320 "Parser.fsy"
                                                                           NotExists _3 
                   )
# 320 "Parser.fsy"
                 : 'gentype_boolean));
# 1375 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _4 = parseState.GetInput(4) :?> 'gentype_inlist in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 321 "Parser.fsy"
                                                                           In (_1, _4) 
                   )
# 321 "Parser.fsy"
                 : 'gentype_boolean));
# 1387 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _3 = parseState.GetInput(3) :?> 'gentype_subselect in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 322 "Parser.fsy"
                                                                           InSelect (_1, _3) 
                   )
# 322 "Parser.fsy"
                 : 'gentype_boolean));
# 1399 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            let _5 = parseState.GetInput(5) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 323 "Parser.fsy"
                                                                           Between (_1, _3, _5) 
                   )
# 323 "Parser.fsy"
                 : 'gentype_boolean));
# 1412 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 324 "Parser.fsy"
                                                                           IsNull _1 
                   )
# 324 "Parser.fsy"
                 : 'gentype_boolean));
# 1423 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 325 "Parser.fsy"
                                                                           IsNotNull _1 
                   )
# 325 "Parser.fsy"
                 : 'gentype_boolean));
# 1434 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_boolean in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 326 "Parser.fsy"
                                                                           _2 
                   )
# 326 "Parser.fsy"
                 : 'gentype_boolean));
# 1445 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 330 "Parser.fsy"
                           [_1] 
                   )
# 330 "Parser.fsy"
                 : 'gentype_inlist));
# 1456 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _3 = parseState.GetInput(3) :?> 'gentype_inlist in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 333 "Parser.fsy"
                           _1 :: _3 
                   )
# 333 "Parser.fsy"
                 : 'gentype_inlist));
|]
# 1469 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 64;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Result =
    engine lexer lexbuf 0 :?> _
