%domain (Plan);

%function ( unary, hours, Plan.Calc.Hours, Decimal);
%function ( unary, zeronull, Plan.Calc.ZeroNull, Decimal);

type TimeSpan;

/* Version implemented using inheritence */
@Versioned type Versioned { Deleted = false };

value Plan.Duration
{
    Start    : DateTime,
    End      : DateTime,
    Valid    = Start <= End ? true : false
}
[
    Time     = hours (End , Start)
];

"
What is a project, exactly? We talk a lot about specific facets of project management, 
but it’s sometimes valuable to start at the root and dig into the basics.

To fully understand high-level project management concepts, it’s important to know the simple answers. 
When you can call on this knowledge, more complicated concepts are easier to master. Whether you’re the project manager or a stakeholder, give your next project definition with these project management tips in mind.

<b>Project Definition</b>
A project is a set of tasks that must be completed within a defined timeline to accomplish a 
specific set of goals. These tasks are completed by a group of people known as the project team, 
which is led by a project manager, who oversees the planning, scheduling, tracking and successful completion of projects.

Besides the project team, projects require resources such as labor, materials and equipment. Organizations and individuals
manage projects with a wide range of objectives. These can take many forms, from constructing a building to planning an 
event and even completing a certain duty. Retailers, for example, may pursue projects that improve the way they track 
order fulfillment. Construction teams complete projects any time they plan and build something—and so on!

Project management software gives you the tools to manage all the parts of a project so it is delivered on time and within budget. 
ProjectManager is award-winning project management software with features to plan, manage and track your project in real time. 
Organize tasks on our robust Gantt, link all four types of task dependencies to avoid costly delays and save your 
project plan by setting a baseline. This allows you to track your actual progress against your planned progress to 
help you stay on track. Get started with ProjectManager today for free.
"
entity Plan.Project : Versioned
                    = Node (SKey = SKey, Name = Name, TypeName = "Plan"),
                      BI.Item (WBS         = WBS, 
                               Name        = Name,
                               ActualCost  = ActualCost, 
                               PlanCost    = PlanCost, 
                               ImpliedCost = ImpliedCost,
                               Plan        = Duration, 
                               Actual      = Duration,
                               TypeName    = "Plan")

(
    Id : Guid
)
{
    Name        : String,
    Description : String,
    WBS         : String,
    Duration    : Plan.Duration,
    Valid       = Name     = null ||
                  Duration = null
                  ? false : true
}
[
    Tasks        : Plan.Tasks.Task (Project = self),

    PlanCost     = 0.0 + sum (Tasks.PlanCost),
    ActualCost   = 0.0 + sum (Tasks.ActualCost),
    ImpliedCost  = 0.0 + sum (Tasks.ImpliedCost)
];

"SubTask enables the entity Task to export more than one Edge"
view Plan.Tasks.SubTask = Edge (From = Task, To = Parent, TypeName = "Plan-Task-Part", Name = Task.Name)
(
    Task        : Plan.Tasks.Task
)
{
    Parent        : Plan.Tasks.Task
};

"
While the word “task” might bring about feelings of despair related to chores or undesirable actions, 
this is usually related more so to the way you have to manage your time than the task itself.

In this article, we’ll do a deep dive into tasks, show you the best ways to break down larger 
projects into them, while covering efficient approaches to manage and distribute tasks.
"
entity Plan.Tasks.Task : Versioned
                       = Node (SKey = SKey, Name = Name, TypeName = "Plan-Task"),
                         Edge (From = self, To = Project, TypeName = "Plan-Task", Name = Name),
                         Plan.Tasks.SubTask (Task = self, Parent = Parent),
                         BI.Item (WBS         = BIWBS, 
                                  Name        = Name,
                                  ActualCost  = ActualCost, 
                                  PlanCost    = PlanCost, 
                                  ImpliedCost = ImpliedCost,
                                  Plan        = Duration, 
                                  Actual      = Actual.Duration,
                                  TypeName    = Parent = null ? "Task" : "SubTask")
(
    Project     : Plan.Project,
    Id          : Int32
)
{
    Parent      : Plan.Tasks.Task,
    Name        : String,
    WBS         : String,
    Schedule    : Plan.Tasks.ScheduleType,    
    Duration    : Plan.Duration,
    Cost        : Decimal,
    Valid       = Project  = null ||
                  Duration = null ||
                  Name     = null 
                  ? false : true
}
[
    Actual      : Plan.Tasks.Actual,
    After       : Plan.Tasks.TaskLink,
    Before      : Plan.Tasks.TaskLink,
    SubTasks    : Plan.Tasks.Task (Parent = self),
    Resources   : Plan.Tasks.TaskResource,

    /* BI */
    BIWBS       = Parent = null ? Project.WBS + "." + WBS : Parent.BIWBS + "." + WBS,  
    "Cost of prior tasks that can not be recovered"
    SunkCost    = 0.0 + sum (After.LinkCost),
    PctComplete = Actual.Duration.Time / Duration.Time,
    Effort      = count (Resources.Weight) * Duration.Time,
    ImpResCost  = 0.0 + sum (Resources.ImpliedCost),
    PlanCost    = Cost +
                  sum (SubTasks.PlanCost) +
                  sum (Resources.UseCost) + 
                  0.0 + (sum (Resources.TimeCost) * Duration.Time),
    ActualCost  = Cost +
                  sum (SubTasks.ActualCost) +
                  sum (Resources.UseCost) + 
                  (Actual.Cost),
    ImpliedCost = Cost +
                  sum (SubTasks.ImpliedCost) +
                  sum (Resources.UseCost) + 
                  zeronull(ImpResCost)
];

@Versioned
aspect Plan.Tasks.Actual
{
    Duration    : Plan.Duration,
    Close       : DateTime,
    "set of the controllers that have approved this update"
    Approval    : Set<String>,
    Cost        : Decimal
};

@Versioned
segment Plan.Tasks.TaskLink
(
    Task        : Plan.Tasks.Task
)
{
    Lag         : TimeSpan
}
[
    LinkCost    = 0.0 + Task.SunkCost
]
;

enum Plan.Tasks.ScheduleType
{
    Manual  #1,
    Auto    #2
};

"
Resources used by the task
"
segment Plan.Tasks.TaskResource  = Node (SKey = SKey, Name = Resource.Name, TypeName = "Plan-Task-Resource"), 
                                   Edge (From = owner, To = Resource, Name = Resource.Name, TypeName = "Plan-Task-Resource")
(
    Resource    : Plan.Resource
)
{
    Weight      = 1.0,
    Deleted     = false,
    Valid       = Resource = null ? false : true
}
[
    /* booking */

    Timesheets  : Booking.Timesheet (Resource = Resource, Task = owner),

    /* cost */
    "Implied Cost"
    ImpliedCost = 0.0 + sum (Timesheets.Cost),

    "Time cost is an aggregate because the Resource reference is not infered to be a single"
    TimeCost    = Resource.TimeCost,
    
    "Use cost is an aggregate because the Resource reference is not infered to be a single"
    UseCost     = Resource.UseCost
];

"
Resource planning is the process of determining how a business will allocate resources in a project, 
such as assigning tasks to individuals based on their skills and availability. 

It helps balance demand and capacity across projects, allowing you to keep tight 
timelines and manage stakeholder expectations.
"
entity Plan.Resource : Versioned
                     = Node (SKey = SKey, Name = Name, TypeName = "Plan-Resource")
(
    Name      : String
)
{
    "Description of the resource"
    Notes     : String,

    "Dates the resource is available"
    Duration  : Plan.Duration,

    "Cost each time the resource is used"
    UseCost   : Decimal,

    "Cost per hour of resource usage"
    TimeCost  : Decimal
}
[
    Booked    : Booking.Timesheet (Resource = self)
];

/* 
 * view for BI analysis
 */

view BI.Item    = Node (SKey = SKey, Name = Name, TypeName = "BI-Cost-" + TypeName)
(
    WBS         : String,
    TypeName    : String
)
{
    Name        : String,
    ActualCost  : Decimal, 
    PlanCost    : Decimal, 
    ImpliedCost : Decimal,
    Plan        : Plan.Duration,
    Actual      : Plan.Duration
}
[
    PlanStart   = Plan.Start,
    PlanEnd     = Plan.End,
    PlanTime    = Plan.Time,
    ActualStart = Actual.Start,
    ActualEnd   = Actual.End,
    ActualTime  = Actual.Time
];

"
Time booking by resources against 
"
entity Booking.Timesheet : Versioned
(
    Resource    : Plan.Resource,
    Task        : Plan.Tasks.Task,
    Date        : DateTime
)
{
    Time        : Decimal,
    "Estimated time to complete this task"
    Estimate    : Decimal,
    Comment     : String,
    Valid       = Resource = null ||             /* resource can not be null                                */
                  Task = null ||                 /* task can not be null                                    */
                  Date <= Task.Duration.Start || /* date before task start is invalid                       */
                  Date >= Task.Duration.End ||   /* date after task end is invalid                          */
                  Date <= Task.Actual.Close      /* Closing date for time booking in the Task Actual aspect */
                  ? false : true
}
[
    Cost        = Resource.TimeCost * Time,
];
