%domain(Acc);%ids;%json;

%function ( unary, credit, Acc.Totals.Credit, Decimal);
%function ( unary, debit, Acc.Totals.Debit, Decimal);

@CubeDimension
entity Acc.Sector : Versioned #30
(
    "name of the sector"
    Name            : String #1 
)
{
    "description of the sector"
    Description     : String #3 
}
[
    "customers in this sector"
    Customers       : Acc.Customer (Sector = this) #29
];

"A Customer"
@CubeDimension, CubeHierarchy(Parent)
entity Acc.Customer : Versioned #3 
(
    " name  of the customer"
    Name            : String #1
)
{
    Address         : String #3,
    SSN             : String #4,
    Parent		    : Acc.Customer #5,
    Sector          : Acc.Sector #11 
}
[
    "Account that the customer owns"
    Accounts        : Acc.Account #20, 
    Children        : Acc.Customer (Parent = this) #27
];

"a transaction against account"
@DeltaIndex(31), CubeFact(26)
segment Acc.Transaction : Versioned 
(
    "when the transaction was authorised"
    At              : DateTime #2
)
{
    "debt or credit to account, with respect to the customer position"
    @CubeMeasure(Aggregate.Sum)
    Amount          : Decimal #4,

    "who it was paid to"
    Payee           : String #5,
    Receipient      : Acc.Customer #11
}
[
    @CubeExtent
    Debit           = debit(Amount),
    @CubeExtent
    Credit          = credit(Amount),
    @CubeMeasure(Aggregate.Average)
    Amount2         = Amount
];

"An Account for a customer"
@CubeDimension
segment Acc.Account : Versioned 
(
    Title           : String #2
)
{
    Opened          : DateTime #4,
    Closed          : DateTime #5
}
[
    "transactions against the account"
    Transactions    : Acc.Transaction #25,

    "the last closing balance"
    Balance         : Acc.Balance #21,

    /* calculations */
    @CubeMeasure(Aggregate.Sum)
    CurrentBalance  = deltasum(Transactions.Amount),
    Debit           = sum(Transactions.Debit),
    Credit          = sum(Transactions.Credit),
];

" Balance is the rolled up value for the account computed for a time"
aspect Acc.Balance : Versioned
{
    "DateTime of the max balance"
    When            : DateTime #3,

    "Current closign balance at time When"
    Current         : Decimal #4
};

/* **********************************************************************
API for remote execution
********************************************************************** */
message API.CustomerCube #49
( 
    Customer        : Acc.Customer #1
)
{
    CustomerTree    : List<Acc.Customer> #2,
    Sector          : List<Acc.Sector> #3,
    Accounts        : List<Acc.Account> #4 ,

    "Using the generated cube element from Transaction and its dimensions"
    Cube            : List<Acc.Transaction_Cube> #5,

    "Using the generated cube drilldown from cube"
    Drilldown       : List<Acc.Transaction_CubeDrillDown> #6
};
