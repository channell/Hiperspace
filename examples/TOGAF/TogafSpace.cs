using Hiperspace;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Togaf
{
    public partial class TogafSpace
    {
        private static SortedDictionary<string, Horizon[]> Roles = new()
        {
            {
                "", new Horizon[] // default role
                {
                    new Horizon<Organization> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Service> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<ServiceWorkPackage> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<ServiceGap> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<ServiceLocation> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<ServiceRequirement> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<ServiceAssumption> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<ServiceConstraint> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<ServicePrinciple> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.Driver> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.Actor> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.Function> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.Capability> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.Product> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.Goal> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.Objective> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.Measure> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.Activity> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.Event> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.Process> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.Control> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ValueStream> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.CourseOfAction> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.CourseOfActionWorkPackage> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.CourseOfActionGap> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.CourseOfActionLocation> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.CourseOfActionRequirement> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.CourseOfActionAssumption> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.CourseOfActionConstraint> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.CourseOfActionPrinciple> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ValueStreamWorkPackage> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ValueStreamGap> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ValueStreamLocation> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ValueStreamRequirement> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ValueStreamAssumption> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ValueStreamConstraint> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ValueStreamPrinciple> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ControlWorkPackage> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ControlGap> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ControlLocation> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ControlRequirement> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ControlAssumption> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ControlConstraint> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ControlPrinciple> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ProcessWorkPackage> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ProcessGap> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ProcessLocation> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ProcessRequirement> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ProcessAssumption> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ProcessConstraint> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ProcessPrinciple> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.EventWorkPackage> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.EventGap> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.EventLocation> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.EventRequirement> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.EventAssumption> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.EventConstraint> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.EventPrinciple> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ActivityWorkPackage> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ActivityGap> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ActivityLocation> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ActivityRequirement> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ActivityAssumption> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ActivityConstraint> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ActivityPrinciple> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.MeasureGap> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.MeasureLocation> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.MeasureRequirement> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.MeasureAssumption> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.MeasureConstraint> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.MeasurePrinciple> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ObjectiveWorkPackage> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ObjectiveGap> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ObjectiveLocation> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ObjectiveRequirement> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ObjectiveAssumption> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ObjectiveConstraint> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ObjectivePrinciple> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.GoalWorkPackage> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.GoalGap> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.GoalLocation> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.GoalRequirement> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.GoalAssumption> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.GoalConstraint> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.GoalPrinciple> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ProductWorkPackage> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ProductGap> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ProductLocation> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ProductRequirement> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ProductAssumption> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ProductConstraint> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ProductPrinciple> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.CapabilityWorkPackage> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.CapabilityGap> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.CapabilityLocation> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.CapabilityRequirement> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.CapabilityAssumption> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.CapabilityConstraint> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.CapabilityPrinciple> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.FunctionWorkPackage> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.FunctionGap> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.FunctionLocation> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.FunctionRequirement> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.FunctionAssumption> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.FunctionConstraint> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.FunctionPrinciple> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ActorWorkPackage> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ActorGap> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ActorLocation> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ActorRequirement> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ActorAssumption> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ActorConstraint> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.ActorPrinciple> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.DriverWorkPackage> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.DriverGap> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.DriverLocation> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.DriverRequirement> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.DriverAssumption> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.DriverConstraint> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Business.DriverPrinciple> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.Entity> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.Usage> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.Logical> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.Physical> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.PhysicalWorkPackage> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.PhysicalGap> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.PhysicalLocation> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.PhysicalRequirement> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.PhysicalAssumption> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.PhysicalConstraint> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.PhysicalPrinciple> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.LogicalWorkPackage> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.LogicalGap> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.LogicalLocation> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.LogicalRequirement> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.LogicalAssumption> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.LogicalConstraint> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.LogicalPrinciple> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.EntityWorkPackage> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.EntityGap> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.EntityLocation> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.EntityRequirement> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.EntityAssumption> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.EntityConstraint> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Data.EntityPrinciple> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Application.System> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Application.Component> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Application.Deployed> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Application.DeployedWorkPackage> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Application.DeployedGap> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Application.DeployedLocation> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Application.DeployedRequirement> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Application.DeployedAssumption> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Application.DeployedConstraint> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Application.DeployedPrinciple> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Application.ComponentWorkPackage> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Application.ComponentGap> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Application.ComponentLocation> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Application.ComponentRequirement> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Application.ComponentAssumption> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Application.ComponentConstraint> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Application.ComponentPrinciple> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Application.SystemWorkPackage> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Application.SystemGap> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Application.SystemLocation> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Application.SystemRequirement> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Application.SystemAssumption> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Application.SystemConstraint> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Application.SystemPrinciple> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Technology.Platform> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Technology.Host> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Technology.Instance> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Technology.InstanceWorkPackage> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Technology.InstanceGap> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Technology.InstanceLocation> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Technology.InstanceRequirement> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Technology.InstanceAssumption> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Technology.InstanceConstraint> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Technology.InstancePrinciple> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Technology.HostWorkPackage> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Technology.HostGap> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Technology.HostLocation> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Technology.HostRequirement> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Technology.HostAssumption> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Technology.HostConstraint> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Technology.HostPrinciple> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Technology.PlatformWorkPackage> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Technology.PlatformGap> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Technology.PlatformLocation> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Technology.PlatformRequirement> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Technology.PlatformAssumption> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Technology.PlatformConstraint> (i => i.ValidBase == true && i.Deleted == false),
                    new Horizon<Technology.PlatformPrinciple> (i => i.ValidBase == true && i.Deleted == false),
                }
            },
            {
                "WRITE", new Horizon[]
                {

                    new Horizon<Service> (i => i.ValidBase == true),
                    new Horizon<ServiceWorkPackage> (i => i.ValidBase == true),
                    new Horizon<ServiceGap> (i => i.ValidBase == true),
                    new Horizon<ServiceLocation> (i => i.ValidBase == true),
                    new Horizon<ServiceRequirement> (i => i.ValidBase == true),
                    new Horizon<ServiceAssumption> (i => i.ValidBase == true),
                    new Horizon<ServiceConstraint> (i => i.ValidBase == true),
                    new Horizon<ServicePrinciple> (i => i.ValidBase == true),
                    new Horizon<Business.Driver> (i => i.ValidBase == true),
                    new Horizon<Business.Actor> (i => i.ValidBase == true),
                    new Horizon<Business.Function> (i => i.ValidBase == true),
                    new Horizon<Business.Capability> (i => i.ValidBase == true),
                    new Horizon<Business.Product> (i => i.ValidBase == true),
                    new Horizon<Business.Goal> (i => i.ValidBase == true),
                    new Horizon<Business.Objective> (i => i.ValidBase == true),
                    new Horizon<Business.Measure> (i => i.ValidBase == true),
                    new Horizon<Business.Activity> (i => i.ValidBase == true),
                    new Horizon<Business.Event> (i => i.ValidBase == true),
                    new Horizon<Business.Process> (i => i.ValidBase == true),
                    new Horizon<Business.Control> (i => i.ValidBase == true),
                    new Horizon<Business.ValueStream> (i => i.ValidBase == true),
                    new Horizon<Business.CourseOfAction> (i => i.ValidBase == true),
                    new Horizon<Business.CourseOfActionWorkPackage> (i => i.ValidBase == true),
                    new Horizon<Business.CourseOfActionGap> (i => i.ValidBase == true),
                    new Horizon<Business.CourseOfActionLocation> (i => i.ValidBase == true),
                    new Horizon<Business.CourseOfActionRequirement> (i => i.ValidBase == true),
                    new Horizon<Business.CourseOfActionAssumption> (i => i.ValidBase == true),
                    new Horizon<Business.CourseOfActionConstraint> (i => i.ValidBase == true),
                    new Horizon<Business.CourseOfActionPrinciple> (i => i.ValidBase == true),
                    new Horizon<Business.ValueStreamWorkPackage> (i => i.ValidBase == true),
                    new Horizon<Business.ValueStreamGap> (i => i.ValidBase == true),
                    new Horizon<Business.ValueStreamLocation> (i => i.ValidBase == true),
                    new Horizon<Business.ValueStreamRequirement> (i => i.ValidBase == true),
                    new Horizon<Business.ValueStreamAssumption> (i => i.ValidBase == true),
                    new Horizon<Business.ValueStreamConstraint> (i => i.ValidBase == true),
                    new Horizon<Business.ValueStreamPrinciple> (i => i.ValidBase == true),
                    new Horizon<Business.ControlWorkPackage> (i => i.ValidBase == true),
                    new Horizon<Business.ControlGap> (i => i.ValidBase == true),
                    new Horizon<Business.ControlLocation> (i => i.ValidBase == true),
                    new Horizon<Business.ControlRequirement> (i => i.ValidBase == true),
                    new Horizon<Business.ControlAssumption> (i => i.ValidBase == true),
                    new Horizon<Business.ControlConstraint> (i => i.ValidBase == true),
                    new Horizon<Business.ControlPrinciple> (i => i.ValidBase == true),
                    new Horizon<Business.ProcessWorkPackage> (i => i.ValidBase == true),
                    new Horizon<Business.ProcessGap> (i => i.ValidBase == true),
                    new Horizon<Business.ProcessLocation> (i => i.ValidBase == true),
                    new Horizon<Business.ProcessRequirement> (i => i.ValidBase == true),
                    new Horizon<Business.ProcessAssumption> (i => i.ValidBase == true),
                    new Horizon<Business.ProcessConstraint> (i => i.ValidBase == true),
                    new Horizon<Business.ProcessPrinciple> (i => i.ValidBase == true),
                    new Horizon<Business.EventWorkPackage> (i => i.ValidBase == true),
                    new Horizon<Business.EventGap> (i => i.ValidBase == true),
                    new Horizon<Business.EventLocation> (i => i.ValidBase == true),
                    new Horizon<Business.EventRequirement> (i => i.ValidBase == true),
                    new Horizon<Business.EventAssumption> (i => i.ValidBase == true),
                    new Horizon<Business.EventConstraint> (i => i.ValidBase == true),
                    new Horizon<Business.EventPrinciple> (i => i.ValidBase == true),
                    new Horizon<Business.ActivityWorkPackage> (i => i.ValidBase == true),
                    new Horizon<Business.ActivityGap> (i => i.ValidBase == true),
                    new Horizon<Business.ActivityLocation> (i => i.ValidBase == true),
                    new Horizon<Business.ActivityRequirement> (i => i.ValidBase == true),
                    new Horizon<Business.ActivityAssumption> (i => i.ValidBase == true),
                    new Horizon<Business.ActivityConstraint> (i => i.ValidBase == true),
                    new Horizon<Business.ActivityPrinciple> (i => i.ValidBase == true),
                    new Horizon<Business.MeasureGap> (i => i.ValidBase == true),
                    new Horizon<Business.MeasureLocation> (i => i.ValidBase == true),
                    new Horizon<Business.MeasureRequirement> (i => i.ValidBase == true),
                    new Horizon<Business.MeasureAssumption> (i => i.ValidBase == true),
                    new Horizon<Business.MeasureConstraint> (i => i.ValidBase == true),
                    new Horizon<Business.MeasurePrinciple> (i => i.ValidBase == true),
                    new Horizon<Business.ObjectiveWorkPackage> (i => i.ValidBase == true),
                    new Horizon<Business.ObjectiveGap> (i => i.ValidBase == true),
                    new Horizon<Business.ObjectiveLocation> (i => i.ValidBase == true),
                    new Horizon<Business.ObjectiveRequirement> (i => i.ValidBase == true),
                    new Horizon<Business.ObjectiveAssumption> (i => i.ValidBase == true),
                    new Horizon<Business.ObjectiveConstraint> (i => i.ValidBase == true),
                    new Horizon<Business.ObjectivePrinciple> (i => i.ValidBase == true),
                    new Horizon<Business.GoalWorkPackage> (i => i.ValidBase == true),
                    new Horizon<Business.GoalGap> (i => i.ValidBase == true),
                    new Horizon<Business.GoalLocation> (i => i.ValidBase == true),
                    new Horizon<Business.GoalRequirement> (i => i.ValidBase == true),
                    new Horizon<Business.GoalAssumption> (i => i.ValidBase == true),
                    new Horizon<Business.GoalConstraint> (i => i.ValidBase == true),
                    new Horizon<Business.GoalPrinciple> (i => i.ValidBase == true),
                    new Horizon<Business.ProductWorkPackage> (i => i.ValidBase == true),
                    new Horizon<Business.ProductGap> (i => i.ValidBase == true),
                    new Horizon<Business.ProductLocation> (i => i.ValidBase == true),
                    new Horizon<Business.ProductRequirement> (i => i.ValidBase == true),
                    new Horizon<Business.ProductAssumption> (i => i.ValidBase == true),
                    new Horizon<Business.ProductConstraint> (i => i.ValidBase == true),
                    new Horizon<Business.ProductPrinciple> (i => i.ValidBase == true),
                    new Horizon<Business.CapabilityWorkPackage> (i => i.ValidBase == true),
                    new Horizon<Business.CapabilityGap> (i => i.ValidBase == true),
                    new Horizon<Business.CapabilityLocation> (i => i.ValidBase == true),
                    new Horizon<Business.CapabilityRequirement> (i => i.ValidBase == true),
                    new Horizon<Business.CapabilityAssumption> (i => i.ValidBase == true),
                    new Horizon<Business.CapabilityConstraint> (i => i.ValidBase == true),
                    new Horizon<Business.CapabilityPrinciple> (i => i.ValidBase == true),
                    new Horizon<Business.FunctionWorkPackage> (i => i.ValidBase == true),
                    new Horizon<Business.FunctionGap> (i => i.ValidBase == true),
                    new Horizon<Business.FunctionLocation> (i => i.ValidBase == true),
                    new Horizon<Business.FunctionRequirement> (i => i.ValidBase == true),
                    new Horizon<Business.FunctionAssumption> (i => i.ValidBase == true),
                    new Horizon<Business.FunctionConstraint> (i => i.ValidBase == true),
                    new Horizon<Business.FunctionPrinciple> (i => i.ValidBase == true),
                    new Horizon<Business.ActorWorkPackage> (i => i.ValidBase == true),
                    new Horizon<Business.ActorGap> (i => i.ValidBase == true),
                    new Horizon<Business.ActorLocation> (i => i.ValidBase == true),
                    new Horizon<Business.ActorRequirement> (i => i.ValidBase == true),
                    new Horizon<Business.ActorAssumption> (i => i.ValidBase == true),
                    new Horizon<Business.ActorConstraint> (i => i.ValidBase == true),
                    new Horizon<Business.ActorPrinciple> (i => i.ValidBase == true),
                    new Horizon<Business.DriverWorkPackage> (i => i.ValidBase == true),
                    new Horizon<Business.DriverGap> (i => i.ValidBase == true),
                    new Horizon<Business.DriverLocation> (i => i.ValidBase == true),
                    new Horizon<Business.DriverRequirement> (i => i.ValidBase == true),
                    new Horizon<Business.DriverAssumption> (i => i.ValidBase == true),
                    new Horizon<Business.DriverConstraint> (i => i.ValidBase == true),
                    new Horizon<Business.DriverPrinciple> (i => i.ValidBase == true),
                    new Horizon<Data.Entity> (i => i.ValidBase == true),
                    new Horizon<Data.Usage> (i => i.ValidBase == true),
                    new Horizon<Data.Logical> (i => i.ValidBase == true),
                    new Horizon<Data.Physical> (i => i.ValidBase == true),
                    new Horizon<Data.PhysicalWorkPackage> (i => i.ValidBase == true),
                    new Horizon<Data.PhysicalGap> (i => i.ValidBase == true),
                    new Horizon<Data.PhysicalLocation> (i => i.ValidBase == true),
                    new Horizon<Data.PhysicalRequirement> (i => i.ValidBase == true),
                    new Horizon<Data.PhysicalAssumption> (i => i.ValidBase == true),
                    new Horizon<Data.PhysicalConstraint> (i => i.ValidBase == true),
                    new Horizon<Data.PhysicalPrinciple> (i => i.ValidBase == true),
                    new Horizon<Data.LogicalWorkPackage> (i => i.ValidBase == true),
                    new Horizon<Data.LogicalGap> (i => i.ValidBase == true),
                    new Horizon<Data.LogicalLocation> (i => i.ValidBase == true),
                    new Horizon<Data.LogicalRequirement> (i => i.ValidBase == true),
                    new Horizon<Data.LogicalAssumption> (i => i.ValidBase == true),
                    new Horizon<Data.LogicalConstraint> (i => i.ValidBase == true),
                    new Horizon<Data.LogicalPrinciple> (i => i.ValidBase == true),
                    new Horizon<Data.EntityWorkPackage> (i => i.ValidBase == true),
                    new Horizon<Data.EntityGap> (i => i.ValidBase == true),
                    new Horizon<Data.EntityLocation> (i => i.ValidBase == true),
                    new Horizon<Data.EntityRequirement> (i => i.ValidBase == true),
                    new Horizon<Data.EntityAssumption> (i => i.ValidBase == true),
                    new Horizon<Data.EntityConstraint> (i => i.ValidBase == true),
                    new Horizon<Data.EntityPrinciple> (i => i.ValidBase == true),
                    new Horizon<Application.System> (i => i.ValidBase == true),
                    new Horizon<Application.Component> (i => i.ValidBase == true),
                    new Horizon<Application.Deployed> (i => i.ValidBase == true),
                    new Horizon<Application.DeployedWorkPackage> (i => i.ValidBase == true),
                    new Horizon<Application.DeployedGap> (i => i.ValidBase == true),
                    new Horizon<Application.DeployedLocation> (i => i.ValidBase == true),
                    new Horizon<Application.DeployedRequirement> (i => i.ValidBase == true),
                    new Horizon<Application.DeployedAssumption> (i => i.ValidBase == true),
                    new Horizon<Application.DeployedConstraint> (i => i.ValidBase == true),
                    new Horizon<Application.DeployedPrinciple> (i => i.ValidBase == true),
                    new Horizon<Application.ComponentWorkPackage> (i => i.ValidBase == true),
                    new Horizon<Application.ComponentGap> (i => i.ValidBase == true),
                    new Horizon<Application.ComponentLocation> (i => i.ValidBase == true),
                    new Horizon<Application.ComponentRequirement> (i => i.ValidBase == true),
                    new Horizon<Application.ComponentAssumption> (i => i.ValidBase == true),
                    new Horizon<Application.ComponentConstraint> (i => i.ValidBase == true),
                    new Horizon<Application.ComponentPrinciple> (i => i.ValidBase == true),
                    new Horizon<Application.SystemWorkPackage> (i => i.ValidBase == true),
                    new Horizon<Application.SystemGap> (i => i.ValidBase == true),
                    new Horizon<Application.SystemLocation> (i => i.ValidBase == true),
                    new Horizon<Application.SystemRequirement> (i => i.ValidBase == true),
                    new Horizon<Application.SystemAssumption> (i => i.ValidBase == true),
                    new Horizon<Application.SystemConstraint> (i => i.ValidBase == true),
                    new Horizon<Application.SystemPrinciple> (i => i.ValidBase == true),
                    new Horizon<Technology.Platform> (i => i.ValidBase == true),
                    new Horizon<Technology.Host> (i => i.ValidBase == true),
                    new Horizon<Technology.Instance> (i => i.ValidBase == true),
                    new Horizon<Technology.InstanceWorkPackage> (i => i.ValidBase == true),
                    new Horizon<Technology.InstanceGap> (i => i.ValidBase == true),
                    new Horizon<Technology.InstanceLocation> (i => i.ValidBase == true),
                    new Horizon<Technology.InstanceRequirement> (i => i.ValidBase == true),
                    new Horizon<Technology.InstanceAssumption> (i => i.ValidBase == true),
                    new Horizon<Technology.InstanceConstraint> (i => i.ValidBase == true),
                    new Horizon<Technology.InstancePrinciple> (i => i.ValidBase == true),
                    new Horizon<Technology.HostWorkPackage> (i => i.ValidBase == true),
                    new Horizon<Technology.HostGap> (i => i.ValidBase == true),
                    new Horizon<Technology.HostLocation> (i => i.ValidBase == true),
                    new Horizon<Technology.HostRequirement> (i => i.ValidBase == true),
                    new Horizon<Technology.HostAssumption> (i => i.ValidBase == true),
                    new Horizon<Technology.HostConstraint> (i => i.ValidBase == true),
                    new Horizon<Technology.HostPrinciple> (i => i.ValidBase == true),
                    new Horizon<Technology.PlatformWorkPackage> (i => i.ValidBase == true),
                    new Horizon<Technology.PlatformGap> (i => i.ValidBase == true),
                    new Horizon<Technology.PlatformLocation> (i => i.ValidBase == true),
                    new Horizon<Technology.PlatformRequirement> (i => i.ValidBase == true),
                    new Horizon<Technology.PlatformAssumption> (i => i.ValidBase == true),
                    new Horizon<Technology.PlatformConstraint> (i => i.ValidBase == true),
                    new Horizon<Technology.PlatformPrinciple> (i => i.ValidBase == true)                }
            }
        };
        public TogafSpace(string Role, HiperSpace space, DateTime? AsAt = null, DateTime? DeltaFrom = null) : this(space, Roles[Role ?? ""], AsAt, DeltaFrom)
        {
            var empty = Organizations.GetFirst();
            if (empty != null)
            {
                var org = Organizations.Bind(new Organization
                {
                    Id = Guid.NewGuid(),
                    Name = "Root",
                    Description = "Root Organization",
                });
                var srv = Services.Bind(new Service
                {
                    Id = Guid.NewGuid(),
                    Name = "Root Service",
                    Description = "Root Service",
                    OwnedBy = org.Value
                });
            }
        }
    }
}
