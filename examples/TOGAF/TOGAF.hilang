%domain(Togaf); %ids;
/*
    Togaf.Edge2 is a view that inherits its keys and attributes, and realized the view
    the implmentation allows an entity/segment/aspect to provide an additional view
    for example Principle provides an edge from part to itself and an edge from 
    itself to its parent.  
*/

"An additional edge helper for Edges"
view Edge_ : Edge = Edge();

"Bidirectional Edge, implemented with two Edges"
view Edges
    = Edge  (From = From, To = To, Name = Name, TypeName = FromTypeName), 
      Edge_ (From = To, To = From, Name = Name, TypeName = ToTypeName)
(
    From            : Node      #2,
    To              : Node      #3,
    FromTypeName    : String    #4,
    ToTypeName      : String    #5
)
{
    Name        : String    #6,
};

/*
    Additional pairs of edges
*/
view Edges2 : Edges = Edges();
view Edges3 : Edges = Edges();
view Edges4 : Edges = Edges();
view Edges5 : Edges = Edges();

@Versioned
type Togaf.Base 
(
    Id              : Guid
)
{
    Name            : String,
    Description     : String,
    Deleted         = false
}
[
    
    ValidBase 		= Id = null || Name = null ? false : true
];

%function (unary, StrategicEdge, Togaf.TogafFunctions.StrategicEdge, Set<Graph.HiperEdge>);
%function (unary, Goals, Togaf.TogafFunctions.Goals, Set<Togaf.GoalRef>);
value Togaf.GoalRef #651
{
    Value           : Togaf.Business.Goal #1
};

/* ********************************************************
    General entities
******************************************************** */

segment Togaf.Has.Principle : Togaf.Base 
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Principle"),
      Edges       (From = owner, To = this, Name = Name, FromTypeName = "AF-Has-Principle", ToTypeName = "AF-Principle-For" );

segment Togaf.Has.Constraint : Togaf.Base  
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Constraint"),
      Edges       (From = owner, To = this, Name = Name, FromTypeName = "AF-Has-Constraint", ToTypeName = "AF-Constraint-For");

segment Togaf.Has.Assumption : Togaf.Base 
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Assumption"),
      Edges       (From = owner, To = this, Name = Name, FromTypeName = "AF-Has-Assumption", ToTypeName = "AF-Assumption-For") ;

segment Togaf.Has.Requirement : Togaf.Base 
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Requirement"),
      Edges       (From = owner, To = this, Name = Name, FromTypeName = "AF-Has-Requirement", ToTypeName = "AF-Requirement-For") ;

segment Togaf.Has.Location : Togaf.Base 
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Location"),
      Edges       (From = owner, To = this, Name = Name, FromTypeName = "AF-Has-Location", ToTypeName = "AF-Location-For") ;

segment Togaf.Has.Gap : Togaf.Base 
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Gap"),
      Edges       (From = owner, To = this, Name = Name, FromTypeName = "AF-Has-Gap", ToTypeName = "AF-Gap-For");

segment Togaf.Has.WorkPackage : Togaf.Base 
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-WorkPackage"),
      Edge        (From = owner, To = this, Name = Name, TypeName = "AF-Has-WorkPackage"),
      Edge_       (To = owner, From = this, Name = Name, TypeName = "AF-WorkPackage-For"),
      Graph.HiperEdge = StrategicEdges 
[
    "All Edges that can be projected as Transitative Edges to a Business Goal"
    @Once
    StrategicEdges  = StrategicEdge(this),
    Goals           = Goals(StrategicEdges)
];

type Togaf.General.Base : Togaf.Base, HasVectorSpace
[
    Principle       : Togaf.Has.Principle,
    Constraint      : Togaf.Has.Constraint,
    Assumption      : Togaf.Has.Assumption,
    Requirement     : Togaf.Has.Requirement,
    Location        : Togaf.Has.Location,
    Gap             : Togaf.Has.Gap,
    WorkPackage     : Togaf.Has.WorkPackage
];

/* ********************************************************
    Organization 
******************************************************** */
@CubeDimension
entity Togaf.Organization : Togaf.Base 
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Organization"),
      Edges       ( From = this, To = Parent, FromTypeName = "AF-Organization-Part", ToTypeName = "AF-Organization-Include") #20
{
    Parent          : Togaf.Organization #5
}
[
    Children        : Togaf.Organization ( Parent = this) #12,
    Motivates       : Togaf.Business.Driver (MotivatedBy = this) #13,
    Contains        : Togaf.Business.Actor (In = this) #14,
    Functions       : Togaf.Business.Function (For = this) #15,
    Uses            : Togaf.Business.Capability ( By = this) #16,
    Produces        : Togaf.Business.Product ( By = this) #17,
    Governs         : Togaf.Service ( OwnedBy = this) #18,
    SameName        : Togaf.Organization (Name = Name) #19
];

/* ********************************************************
    Business
******************************************************** */

entity Togaf.Business.Driver : Togaf.General.Base
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Driver"),    
      Edges       ( From = this, To = MotivatedBy, FromTypeName = "AF-Driver-Organization", ToTypeName = "AF-Organization-Driver") #76
{
    MotivatedBy     : Togaf.Organization #5
}
[
    Creates         : Togaf.Business.Goal ( By = this ) #75,
    SameName        : Togaf.Business.Driver (Name = Name) #1374
];

entity Togaf.Business.Actor : Togaf.General.Base
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Actor"),
      Edges       (From = this, To = In, Name = Name, FromTypeName = "AF-Actor-Organization", ToTypeName = "AF-Organization-Actor") #88 
{
    In              : Togaf.Organization #5
}
[
    Performs        : Togaf.Has.Activity #414,
    Involved        : Togaf.Business.ValueStream (Involves = this) #87,
    SameName        : Togaf.Business.Actor (Name = Name) #1384
];

@CubeDimension
entity Togaf.Business.Function : Togaf.General.Base
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Function"),  
      Edges       ( From = this, To = Parent, FromTypeName = "AF-Function-Part", ToTypeName = "AF-Function-Include"),
      Edges2      ( From = this, To = For, FromTypeName = "AF-Function-Organization", ToTypeName = "AF-Organization-Function"),
      Edges3      ( From = this, To = Delivers, FromTypeName = "AF-Function-Capability", ToTypeName = "AF-Capability-Function") #101
{
    For             : Togaf.Organization #5,
    Parent          : Togaf.Business.Function #6,
    Delivers        : Togaf.Business.Capability #7
}
[
    Children        : Togaf.Business.Function (Parent = this) #98,
    Orchestrates    : Togaf.Business.Process (Decomposes = this) #99,
    Involves        : Togaf.Business.CourseOfAction (Involves = this) #100,
    SameName        : Togaf.Business.Function (Name = Name) #1394
];

@CubeDimension
entity Togaf.Business.Capability : Togaf.General.Base
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Capability"),  
      Edges       ( From = this, To = Parent, FromTypeName = "AF-Capability-Part", ToTypeName = "AF-Capability-Include") #116
{
    By              : Togaf.Organization #5,
    Parent          : Togaf.Business.Capability #6
}
[
    Children        : Togaf.Business.Capability (Parent = this) #111,
    Operated        : Togaf.Business.Process (Operates = this) #112,
    Delivered       : Togaf.Business.Function (Delivers = this) #113,
    EnabledBy       : Togaf.Business.ValueStream (Enables = this) #114,
    Related         : Togaf.Business.CourseOfAction (Enables = this) #115,
    SameName        : Togaf.Business.Capability (Name = Name) #1404
];

@CubeDimension
entity Togaf.Business.Product : Togaf.General.Base
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Product"),  
      Edges       ( From = this, To = Parent, FromTypeName = "AF-Product-Part", ToTypeName = "AF-Product-Include"),
      Edges2      ( From = this, To = Parent, FromTypeName = "AF-Organisation-Product", ToTypeName = "AF-Product-Organisation") #128
{
    By              : Togaf.Organization #5,
    Parent          : Togaf.Business.Product #6
}
[
    Children        : Togaf.Business.Product (Parent = this) #126,
    ProvidedBy      : Togaf.Business.Process (Provides = this) #127,
    SameName        : Togaf.Business.Product (Name = Name) #1414
];

entity Togaf.Business.Goal : Togaf.General.Base
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Goal"),
      Edges       ( From = this, To = By, FromTypeName = "AF-Goal-Driver", ToTypeName = "AF-Driver-Goal") #140
{
    By              : Togaf.Business.Driver #5 
}
[
    RealizedBy      : Togaf.Business.Objective (For = this) #138,
    Follows         : Togaf.Business.CourseOfAction (Leads = this) #139,
    SameName        : Togaf.Business.Goal (Name = Name) #1424
];

entity Togaf.Business.Objective : Togaf.General.Base
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Objective"),
      Edges       ( From = this, To = For, FromTypeName = "AF-Objective-Organisation", ToTypeName = "AF-Organisation-Objective") #151
{
    For             : Togaf.Business.Goal #5
}
[
    Measured        : Togaf.Business.Measure ( For = this ) #150,
    SameName        : Togaf.Business.Objective (Name = Name) #1434
];

entity Togaf.Business.Measure : Togaf.General.Base
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Measure"),
      Edges       ( From = this, To = Tracks, Name = Name, FromTypeName = "AF-Measure-Service", ToTypeName = "AF-Service-Measure"),
      Edges2      ( From = this, To = For, Name = Name, FromTypeName = "AF-Measure-Objective", ToTypeName = "AF-Objective-Measure") #162
{
    For             : Togaf.Business.Objective #5,
    Unit            : String #6,
    Tracks          : Togaf.Service #7
}
[
    Observation     : Togaf.History.Measure #323,
    SameName        : Togaf.Business.Measure (Name = Name) #1444
];

segment Togaf.History.Measure
    = Node        ( SKey = SKey, Name = "", TypeName = "AF-Measurement"),
      Edge        (From = owner, To = this, Name = "", TypeName = "AF-Measurement")
(
    At              : DateTime #2
)
{
    Value           : Decimal #3
};

enum Togaf.Business.ActivityType
{
    Task #1            ,
    Decision #2        ,
    Event #3           
};

entity Togaf.Business.Activity : Togaf.General.Base
    = Node         ( SKey = SKey, Name = Name, TypeName = "AF-Activity"),
      Edges        ( From = this, To = By, Name = Name, FromTypeName = "AF-Activity-Performed", ToTypeName = "AF-Performs-Activity"), 
      Edges2       ( From = this, To = Event, Name = Name, FromTypeName = "AF-Activity-Event", ToTypeName = "AF-Event-Activity"), 
      Edges3       ( From = this, To = Uses, Name = Name, FromTypeName = "AF-Activity-Service", ToTypeName = "AF-BusinesService-Activity"), 
      Edges4       ( From = this, To = After, Name = Name, FromTypeName = "AF-Activity-After", ToTypeName = "AF-Activity-Before"),
      Edges5       ( From = this, To = Part, Name = Name, FromTypeName = "AF-Activity-Process", ToTypeName = "AF-Process-Activity") #175 
{
    By              : Togaf.Business.Actor #5,
    Type            : Togaf.Business.ActivityType #6,
    After           : Togaf.Business.Activity #7,
    Part            : Togaf.Business.Process #8,
    Event           : Togaf.Business.Event #9,
    Uses            : Togaf.Service #10
}
[
    Before          : Togaf.Business.Activity (After = this) #173,
    Originates      : Togaf.Data.Entity(Originator = this) #174,
    SameName        : Togaf.Business.Activity (Name = Name) #1455
];

segment Togaf.Has.Activity : Many<Togaf.Business.Activity>
    = Edges       (From = owner, To = A, Name = A.Name, FromTypeName = "AF-Has-Activity", ToTypeName = "AF-Activity-For") 
/*( 
    Item            : Togaf.Business.Activity
) */
{ 
    Comment         : String #4 
};

enum Togaf.Business.EventType
{
    Start #1           ,
    End #2             ,
    Intermediate #3    
};

@CubeDimension
entity Togaf.Business.Event : Togaf.General.Base
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Event"),
      Edges       ( From = this, To = Trigger, Name = Name, FromTypeName = "AF-Event-Service", ToTypeName = "AF-Service-Event") #187
{
    Type            : Togaf.Business.EventType #5,
    Trigger         : Togaf.Service #6
}
[
    Activities      : Togaf.Business.Activity ( Event = this) #186,
    SameName        : Togaf.Business.Event (Name = Name) #1466
];

@CubeDimension
entity Togaf.Business.Process : Togaf.General.Base
    = Node         ( SKey = SKey, Name = Name, TypeName = "AF-Process"),
      Edges        ( From = this, To = Decomposes, Name = Name, FromTypeName = "AF-Process-Function", ToTypeName = "AF-Function-Process"), 
      Edges2       ( From = this, To = Operates, Name = Name, FromTypeName = "AF-Process-Capability", ToTypeName = "AF-Capability-Process"), 
      Edges3       ( From = this, To = Provides, Name = Name, FromTypeName = "AF-Process-Product", ToTypeName = "AF-Product-Process"), 
      Edges4       ( From = this, To = Governed, Name = Name, FromTypeName = "AF-Process-Control", ToTypeName = "AF-Control-Process"), 
      Edges5       ( From = this, To = Realizes, Name = Name, FromTypeName = "AF-Process-ValueStream", ToTypeName = "AF-ValueStream-Process") #198 
{
    Decomposes      : Togaf.Business.Function #5,
    Starts          : Togaf.Business.Activity #6,
    Operates        : Togaf.Business.Capability #7,
    Provides        : Togaf.Business.Product #8,
    Governed        : Togaf.Business.Control #9,
    Realizes        : Togaf.Business.ValueStream #10
}
[
    Steps           : Togaf.Business.Activity (Part = this) #197,
    SameName        : Togaf.Business.Process (Name = Name) #1476
];

entity Togaf.Business.Control : Togaf.General.Base
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Control"),
      Edges       ( From = this, To = PartOf, Name = Name, FromTypeName = "AF-Control-Part", ToTypeName = "AF-Control-Includes") #210 
{
    URL             : String #5,
    PartOf          : Togaf.Business.Control #6
}
[
    Includes        : Togaf.Business.Control (PartOf = this) #208,
    Governs         : Togaf.Business.Process (Governed = this) #209,
    SameName        : Togaf.Business.Control (Name = Name) #1486
];

entity Togaf.Business.ValueStream : Togaf.General.Base
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-ValueStream"),
      Edges       ( From = this, To = Parent, Name = Name, FromTypeName = "AF-ValueStream-Part", ToTypeName = "AF-ValueStream-Includes"), 
      Edges2      ( From = this, To = Enables, Name = Name, FromTypeName = "AF-ValueStream-Capability", ToTypeName = "AF-Capability-ValueStream"), 
      Edges3      ( From = this, To = Involves, Name = Name, FromTypeName = "AF-ValueStream-Actor", ToTypeName = "AF-Actor-ValueStream") #222 
{
    URL             : String #5,
    Parent          : Togaf.Business.ValueStream #6,
    Enables         : Togaf.Business.Capability #7,
    Involves        : Togaf.Business.Actor #8
}
[
    Children        : Togaf.Business.ValueStream (Parent = this) #220,
    RealizedBy      : Togaf.Business.Process (Realizes = this) #221,
    SameName        : Togaf.Business.ValueStream (Name = Name) #1496
];

entity Togaf.Business.CourseOfAction : Togaf.General.Base
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-CourseOfAction"),
      Edges       ( From = this, To = Enables, Name = Name, FromTypeName = "AF-CourseOfAction-Capability", ToTypeName = "AF-Capability-CourseOfAction"), 
      Edges2      ( From = this, To = Leads, Name = Name, FromTypeName = "AF-CourseOfAction-Goal", ToTypeName = "AF-Goal-CourseOfAction"), 
      Edges3      ( From = this, To = Involves, Name = Name, FromTypeName = "AF-CourseOfAction-Function", ToTypeName = "AF-Function-CourseOfAction") #232 
{
    URL             : String #5,
    Enables         : Togaf.Business.Capability #6,
    Leads           : Togaf.Business.Goal #7,
    Involves        : Togaf.Business.Function #8
}
[
    SameName        : Togaf.Business.CourseOfAction (Name = Name) #1506
];

/* ********************************************************
    Service
******************************************************** */

@CubeDimension
entity Togaf.Service : Togaf.General.Base 
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Service"),
      Edges       ( From = this, To = OwnedBy, Name = Name, FromTypeName = "AF-Service-Organization", ToTypeName = "AF-Organization-Service") #35
{
    OwnedBy         : Togaf.Organization #5
}
[
    Measures        : Togaf.Business.Measure ( Tracks = this) #30,
    Triggers        : Togaf.Business.Event ( Trigger = this) #31,
    UsedBy          : Togaf.Business.Activity ( Uses = this) #32,
    Provides        : Togaf.Data.Entity(Provider = this) #33,
    ProvidedBy      : Togaf.Application.System ( Realizes = this) #34,
    SameName        : Togaf.Service (Name = Name) #1328
];

/* ********************************************************
    Data
******************************************************** */

entity Togaf.Data.Entity: Togaf.General.Base
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Entity"),
      Edges       ( From = this, To = Originator, Name = Name, FromTypeName = "AF-Entity-Activity", ToTypeName = "AF-Activity-Entity"),
      Edges3      ( From = this, To = Originator, Name = Name, FromTypeName = "AF-Entity-Activity", ToTypeName = "AF-Activity-Entity") #457
{
    Originator      : Togaf.Business.Activity #5,
    Provider        : Togaf.Service #6
}
[
    Logical         : Togaf.Data.Logical (Encapsulate = this) #455,
    DataUsage       : Togaf.Data.Usage (Entity = this) #456,
    SameName        : Togaf.Data.Entity (Name = Name) #1755   
];

entity Togaf.Data.Usage : Togaf.Base
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-DataUsage"),
      Edges       ( From = this, To = Entity, Name = Name, FromTypeName = "AF-DataUsage-Entity", ToTypeName = "AF-Entity-DataUsage"),
      Edges3      ( From = this, To = System, Name = Name, FromTypeName = "AF-DataUsage-System", ToTypeName = "AF-System-DataUsage") #459
(
    Entity          : Togaf.Data.Entity #2,
    System          : Togaf.Application.System #3
)
{
    Comment         : String #7
}
[
    SameName        : Togaf.Data.Usage (Name = Name) #1757
];

entity Togaf.Data.Logical : Togaf.General.Base
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Logical"),
      Edges       ( From = this, To = Encapsulate, Name = Name, FromTypeName = "AF-Logical-Entity", ToTypeName = "AF-Entity-Logical"),
      Edges2      ( From = this, To = Component, Name = Name, FromTypeName = "AF-Logical-Component", ToTypeName = "AF-Component-Logical") #470
{
    Encapsulate     : Togaf.Data.Entity #5,
    Component       : Togaf.Application.Component #6
}
[
    Instantiate     : Togaf.Data.Physical (Instantiate = this) #469,
    SameName        : Togaf.Data.Logical (Name = Name) #1767
];

entity Togaf.Data.Physical : Togaf.General.Base
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Physical"),
      Edges       ( From = this, To = Instantiate, Name = Name, FromTypeName = "AF-Physical-Logical", ToTypeName = "AF-Logical-Physical"),
      Edges2      ( From = this, To = Deployed, Name = Name, FromTypeName = "AF-Physical-Deployed", ToTypeName = "AF-Deployed-Physical") #480
{
    Instantiate     : Togaf.Data.Logical #5,
    Deployed        : Togaf.Application.Deployed #6
}
[
    SameName        : Togaf.Data.Physical (Name = Name) #1777
];
/* ********************************************************
    Application
******************************************************** */
@CubeDimension
entity Togaf.Application.System : Togaf.General.Base
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-System"),
      Edges       ( From = this, To = Realizes, Name = Name, FromTypeName = "AF-System-Service", ToTypeName = "AF-Service-System"),
      Edges2      ( From = this, To = Platform, Name = Name, FromTypeName = "AF-System-Platform", ToTypeName = "AF-Platform-System") #537
{
    Realizes        : Togaf.Service #5,
    Platform        : Togaf.Technology.Platform #6
}
[
    SystemUsage     : Togaf.Data.Usage (System = this) #535,
    ImplementedBy   : Togaf.Application.Component (Implements = this) #536,
    SameName        : Togaf.Application.System (Name = Name) #1838
];

entity Togaf.Application.Component: Togaf.General.Base
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Component"),
      Edges       ( From = this, To = Implements, Name = Name, FromTypeName = "AF-Component-System", ToTypeName = "AF-System-Component"),
      Edges2      ( From = this, To = Host, Name = Name, FromTypeName = "AF-Component-Host", ToTypeName = "AF-Host-Component") #549
{
    Implements      : Togaf.Application.System #5,
    Host            : Togaf.Technology.Host #6
}
[
    ComponentUsage  : Togaf.Data.Logical (Component = this) #547,
    DeployedBy      : Togaf.Application.Deployed (Deployes = this) #548,
    SameName        : Togaf.Application.Component (Name = Name) #1848
];

entity Togaf.Application.Deployed : Togaf.General.Base
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Deployed"),
      Edges       ( From = this, To = Deployes, Name = Name, FromTypeName = "AF-Deployed-Component", ToTypeName = "AF-Component-Deployed"),
      Edges2      ( From = this, To = Host, Name = Name, FromTypeName = "AF-Deployed-Host", ToTypeName = "AF-Host-Deployed") #560
{
    Deployes        : Togaf.Application.Component #5,
    Host            : Togaf.Technology.Instance #6
}
[
    Usage           : Togaf.Data.Physical (Deployed = this) #559,
    SameName        : Togaf.Application.Deployed (Name = Name) #1858
];

/* ********************************************************
    Technology
******************************************************** */
@CubeDimension
entity Togaf.Technology.Platform : Togaf.General.Base
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Platform"),
      Edges       ( From = this, To = Serves, Name = Name, FromTypeName = "AF-Platform-Service", ToTypeName = "AF-Service-Platform") #617
{
    Serves          : Togaf.Service #5
}
[
    Hosts           : Togaf.Application.System (Platform = this) #615,
    Defines         : Togaf.Technology.Host (Platform = this) #616,
    SameName        : Togaf.Technology.Platform (Name = Name) #1919   
];

@CubeDimension
entity Togaf.Technology.Host : Togaf.General.Base
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Platform"),
      Edges       ( From = this, To = Platform, Name = Name, FromTypeName = "AF-Host-Platform", ToTypeName = "AF-Platform-Host") #629
{
    Platform        : Togaf.Technology.Platform #5
}
[
    Hosts           : Togaf.Application.Component (Host = this) #627,
    Instances       : Togaf.Technology.Instance (Host = this) #628 
];

entity Togaf.Technology.Instance : Togaf.General.Base
    = Node        ( SKey = SKey, Name = Name, TypeName = "AF-Platform"),
      Edges       ( From = this, To = Host, Name = Name, FromTypeName = "AF-Instance-Platform", ToTypeName = "AF-Platform-Instance") #640
{
    Host            : Togaf.Technology.Host #5
}
[
    Hosts           : Togaf.Application.Deployed (Host = this) #639,
    SameName        : Togaf.Technology.Instance (Name = Name) #1938
];

/* ********************************************************
    Financials
******************************************************** */
type Togaf.Financial.Allocation : Versioned
    = Node        ( SKey = SKey, Name = "", TypeName = "AF-Value") #1308
(
    Organization    : Togaf.Organization #1,
    Function        : Togaf.Business.Function #2,
    Capability      : Togaf.Business.Capability #3,
    Product         : Togaf.Business.Product #4,
    Event           : Togaf.Business.Event #5,
    Process         : Togaf.Business.Process #6,
    Service         : Togaf.Service #7,
    System          : Togaf.Application.System #8,
    Platform        : Togaf.Technology.Platform #9,
    Host            : Togaf.Technology.Host #10,
)
{
    @CubeMeasure(Aggregate.Sum)
    RevX            : Decimal #12,
    @CubeMeasure(Aggregate.Sum)
    CapX            : Decimal #13,
    @CubeMeasure(Aggregate.Sum)
    OpeX            : Decimal #15,
    @CubeMeasure(Aggregate.Sum)
    Hours           : Int64 #14,

};

@CubeFact(1467, 1469)
entity Togaf.Financial.Cost : Togaf.Financial.Allocation #1309;
@CubeFact(2042, 2044)
entity Togaf.Financial.Income : Togaf.Financial.Allocation #1310;

@CubeFact(2629, 2631)
entity Togaf.Complexity : Versioned
    = Node        ( SKey = SKey, Name = "", TypeName = "AF-Complexity") #1330 
(
    Organization    : Togaf.Organization #1,
    Function        : Togaf.Business.Function #2,
    Capability      : Togaf.Business.Capability #3,
    Product         : Togaf.Business.Product #4,
    Event           : Togaf.Business.Event #5,
    Process         : Togaf.Business.Process #6,
    Service         : Togaf.Service #7,
    System          : Togaf.Application.System #8,
    Platform        : Togaf.Technology.Platform #9,
    Host            : Togaf.Technology.Host #10,
)
{
    @CubeMeasure(Aggregate.Sum)
    E               : Decimal #12,
    @CubeMeasure(Aggregate.Sum)
    N               : Decimal #13,
    @CubeMeasure(Aggregate.Sum)
    P               : Decimal #14
}
[
    @CubeExtent
    M               = E - N + (2 * P)
];
