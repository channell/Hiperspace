%domain(Togaf);
/*
    Edge2 is a view that inherits its keys and attributes, and realized the view
    the implmentation allows an entity/segment/aspect to provide an additional view
    for example Principle provides an edge from part to itself and an edge from 
    itself to its parent.  
*/
view Edge2  : Edge = Edge ();
view Edge3  : Edge = Edge ();
view Edge4  : Edge = Edge ();
view Edge5  : Edge = Edge ();
view Edge6  : Edge = Edge ();
view Edge7  : Edge = Edge ();
view Edge8  : Edge = Edge ();
view Edge9  : Edge = Edge ();
view Edge10 : Edge = Edge ();

@Versioned
type Togaf.Base 
(
    Id              : Guid
)
{
    Name            : String,
    Description     : String,
    Deleted         = false
};

/* ********************************************************
    General entities
******************************************************** */

segment Togaf.Has.Principle : Togaf.Base 
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Principle"),
      Edge (From = owner, To = self, Name = Name, TypeName = "AF-Has-Principle"),
      Edge2 (From = self, To = owner, Name = Name, TypeName = "AF-Principle-For") ;

segment Togaf.Has.Constraint : Togaf.Base  
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Constraint"),
      Edge (From = owner, To = self, Name = Name, TypeName = "AF-Has-Constraint"),
      Edge2 (From = self, To = owner, Name = Name, TypeName = "AF-Constraint-For") ;

segment Togaf.Has.Assumption : Togaf.Base 
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Assumption"),
      Edge (From = owner, To = self, Name = Name, TypeName = "AF-Has-Assumption") ,
      Edge2 (From = self, To = owner, Name = Name, TypeName = "AF-Assumption-For") ;

segment Togaf.Has.Requirement : Togaf.Base 
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Requirement"),
      Edge (From = owner, To = self, Name = Name, TypeName = "AF-Has-Requirement") ,
      Edge2 (From = self, To = owner, Name = Name, TypeName = "AF-Requirement-For") ;

segment Togaf.Has.Location : Togaf.Base 
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Location"),
      Edge (From = owner, To = self, Name = Name, TypeName = "AF-Has-Location") ,
      Edge2 (From = self, To = owner, Name = Name, TypeName = "AF-Location-For") ;

segment Togaf.Has.Gap : Togaf.Base 
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Gap"),
      Edge (From = owner, To = self, Name = Name, TypeName = "AF-Has-Gap") ,
      Edge2 (From = self, To = owner, Name = Name, TypeName = "AF-Gap-For") ;

segment Togaf.Has.WorkPackage : Togaf.Base 
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-WorkPackage"),
      Edge (From = owner, To = self, Name = Name, TypeName = "AF-Has-WorkPackage") ,
      Edge2 (From = self, To = owner, Name = Name, TypeName = "AF-WorkPackage-For") ;

type Togaf.General.Base : Togaf.Base, HasVectorSpace
[
    Principle       : Togaf.Has.Principle,
    Constraint      : Togaf.Has.Constraint,
    Assumption      : Togaf.Has.Assumption,
    Requirement     : Togaf.Has.Requirement,
    Location        : Togaf.Has.Location,
    Gap             : Togaf.Has.Gap,
    WorkPackage     : Togaf.Has.WorkPackage
];

/* ********************************************************
    Organization 
******************************************************** */
entity Togaf.Organization : Togaf.Base 
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Organization"),
      Edge ( From = self, To = Parent, TypeName = "AF-Organization-Part"),
      Edge2 ( From = Parent, To = self, TypeName = "AF-Organization-Include")
{
    Parent          : Togaf.Organization
}
[
    Children        : Togaf.Organization ( Parent = self),
    Motivates       : Togaf.Business.Driver (MotivatedBy = self),
    Contains        : Togaf.Business.Actor (In = self),
    Functions       : Togaf.Business.Function (For = self),
    Uses            : Togaf.Business.Capability ( By = self),
    Produces        : Togaf.Business.Product ( By = self),
    Governs         : Togaf.Service ( OwnedBy = self)
];

/* ********************************************************
    Business
******************************************************** */

entity Togaf.Business.Driver : Togaf.General.Base
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Driver"),    
      Edge ( From = self, To = MotivatedBy, TypeName = "AF-Driver-Organization"),
      Edge2 ( From = MotivatedBy, To = self, TypeName = "AF-Organization-Driver")
{
    MotivatedBy     : Togaf.Organization
}
[
    Creates         : Togaf.Business.Goal ( By = self )
];

entity Togaf.Business.Actor : Togaf.General.Base
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Actor"),
      Edge (From = self, To = In, Name = Name, TypeName = "AF-Actor-Organization"),
      Edge2 (From = In, To = self, Name = Name, TypeName = "AF-Organization-Actor") 
{
    In              : Togaf.Organization
}
[
    Performs        : Togaf.Has.Activity,
    Involved        : Togaf.Business.ValueStream (Involves = self)
];

entity Togaf.Business.Function : Togaf.General.Base
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Function"),  
      Edge ( From = self, To = Parent, TypeName = "AF-Function-Part"),
      Edge2 ( From = Parent, To = self, TypeName = "AF-Function-Include"),
      Edge3 ( From = self, To = For, TypeName = "AF-Function-Organization"),
      Edge4 ( From = For, To = self, TypeName = "AF-Organization-Function"),
      Edge5 ( From = self, To = Delivers, TypeName = "AF-Function-Capability"),
      Edge6 ( From = Delivers, To = self, TypeName = "AF-Capability-Function")
{
    For             : Togaf.Organization,
    Parent          : Togaf.Business.Function,
    Delivers        : Togaf.Business.Capability
}
[
    Children        : Togaf.Business.Function (Parent = self),
    Orchestrates    : Togaf.Business.Process (Decomposes = self),
    Involves        : Togaf.Business.CourseOfAction (Involves = self)
];
entity Togaf.Business.Capability : Togaf.General.Base
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Capability"),  
      Edge ( From = self, To = Parent, TypeName = "AF-Capability-Part"),
      Edge2 ( From = Parent, To = self, TypeName = "AF-Capability-Include")
{
    By              : Togaf.Organization,
    Parent          : Togaf.Business.Capability
}
[
    Children        : Togaf.Business.Capability (Parent = self),
    Operated        : Togaf.Business.Process (Operates = self),
    Delivered       : Togaf.Business.Function (Delivers = self),
    EnabledBy       : Togaf.Business.ValueStream (Enables = self),
    Related         : Togaf.Business.CourseOfAction (Enables = self)
];

entity Togaf.Business.Product : Togaf.General.Base
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Product"),  
      Edge ( From = self, To = Parent, TypeName = "AF-Product-Part"),
      Edge2 ( From = Parent, To = self, TypeName = "AF-Product-Include"),
      Edge3 ( From = self, To = Parent, TypeName = "AF-Organisation-Product"),
      Edge4 ( From = Parent, To = self, TypeName = "AF-Product-Organisation")
{
    By              : Togaf.Organization,
    Parent          : Togaf.Business.Product
}
[
    Children        : Togaf.Business.Product (Parent = self),
    ProvidedBy      : Togaf.Business.Process (Provides = self)
];

entity Togaf.Business.Goal : Togaf.General.Base
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Goal"),
      Edge ( From = self, To = By, TypeName = "AF-Goal-Driver"),
      Edge2 ( From = By, To = self, TypeName = "AF-Driver-Goal")
{
    By              : Togaf.Business.Driver 
}
[
    RealizedBy      : Togaf.Business.Objective (For = self),
    Follows         : Togaf.Business.CourseOfAction (Leads = self)
];

entity Togaf.Business.Objective : Togaf.General.Base
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Objective"),
      Edge ( From = self, To = For, TypeName = "AF-Objective-Organisation"),
      Edge2 ( From = For, To = self, TypeName = "AF-Organisation-Objective")
{
    For             : Togaf.Business.Goal
}
[
    Measured        : Togaf.Business.Measure ( For = self )
];

entity Togaf.Business.Measure : Togaf.General.Base
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Measure"),
      Edge ( From = self, To = Tracks, Name = Name, TypeName = "AF-Measure-Service"),
      Edge2 ( From = Tracks, To = self, Name = Name, TypeName = "AF-Service-Measure"),
      Edge3 ( From = self, To = For, Name = Name, TypeName = "AF-Measure-Objective"),
      Edge4 ( From = For, To = self, Name = Name, TypeName = "AF-Objective-Measure")
{
    For             : Togaf.Business.Objective,
    Unit            : String,
    Tracks          : Togaf.Service
}
[
    Observation     : Togaf.History.Measure 
];

segment Togaf.History.Measure
    = Node ( SKey = SKey, Name = "", TypeName = "AF-Measurement"),
      Edge (From = owner, To = self, Name = "", TypeName = "AF-Measurement")
(
    At              : DateTime
)
{
    Value           : Decimal
};

enum Togaf.Business.ActivityType
{
    Task            #1,
    Decision        #2,
    Event           #3
};

entity Togaf.Business.Activity : Togaf.General.Base
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Activity"),
      Edge ( From = self, To = By, Name = Name, TypeName = "AF-Activity-Performed"),
      Edge2 ( From = By, To = self, Name = Name, TypeName = "AF-Performs-Activity"), 
      Edge3 ( From = self, To = Event, Name = Name, TypeName = "AF-Activity-Event"),
      Edge4 ( From = Event, To = self, Name = Name, TypeName = "AF-Event-Activity"), 
      Edge5 ( From = self, To = Uses, Name = Name, TypeName = "AF-Activity-Service"),
      Edge6 ( From = Uses, To = self, Name = Name, TypeName = "AF-BusinesService-Activity"), 
      Edge7 ( From = self, To = After, Name = Name, TypeName = "AF-Activity-After"),
      Edge8 ( From = After, To = self, Name = Name, TypeName = "AF-Activity-Before"),
      Edge9 ( From = self, To = Part, Name = Name, TypeName = "AF-Activity-Process"),
      Edge10 ( From = Part, To = self, Name = Name, TypeName = "AF-Process-Activity") 
{
    By              : Togaf.Business.Actor,
    Type            : Togaf.Business.ActivityType,
    After           : Togaf.Business.Activity,
    Part            : Togaf.Business.Process,
    Event           : Togaf.Business.Event,
    Uses            : Togaf.Service
}
[
    Before          : Togaf.Business.Activity (After = self),
    Originates      : Togaf.Data.Entity(Originator = self)
];

segment Togaf.Has.Activity
    = Edge (From = owner, To = Item, Name = Item.Name, TypeName = "AF-Has-Activity"),
      Edge2 (From = Item, To = owner, Name = Item.Name, TypeName = "AF-Activity-For") 
( 
    Item            : Togaf.Business.Activity
) 
{ 
    Comment         : String 
};

enum Togaf.Business.EventType
{
    Start           #1,
    End             #2,
    Intermediate    #3
};

entity Togaf.Business.Event : Togaf.General.Base
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Event"),
      Edge ( From = self, To = Trigger, Name = Name, TypeName = "AF-Event-Service"),
      Edge2 ( From = Trigger, To = self, Name = Name, TypeName = "AF-Service-Event")
{
    Type            : Togaf.Business.EventType,
    Trigger         : Togaf.Service
}
[
    Activities      : Togaf.Business.Activity ( Event = self)
];

entity Togaf.Business.Process : Togaf.General.Base
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Process"),
      Edge ( From = self, To = Decomposes, Name = Name, TypeName = "AF-Process-Function"),
      Edge2 ( From = Decomposes, To = self, Name = Name, TypeName = "AF-Function-Process"), 
      Edge3 ( From = self, To = Operates, Name = Name, TypeName = "AF-Process-Capability"), 
      Edge4 ( From = Operates, To = self, Name = Name, TypeName = "AF-Capability-Process"), 
      Edge5 ( From = self, To = Provides, Name = Name, TypeName = "AF-Process-Product"), 
      Edge6 ( From = Provides, To = self, Name = Name, TypeName = "AF-Product-Process"), 
      Edge7 ( From = self, To = Governed, Name = Name, TypeName = "AF-Process-Control"), 
      Edge8 ( From = Governed, To = self, Name = Name, TypeName = "AF-Control-Process"), 
      Edge9 ( From = self, To = Realizes, Name = Name, TypeName = "AF-Process-ValueStream"), 
      Edge10 ( From = Realizes, To = self, Name = Name, TypeName = "AF-ValueStream-Process") 
{
    Decomposes      : Togaf.Business.Function,
    Starts          : Togaf.Business.Activity,
    Operates        : Togaf.Business.Capability,
    Provides        : Togaf.Business.Product,
    Governed        : Togaf.Business.Control,
    Realizes        : Togaf.Business.ValueStream
}
[
    Steps           : Togaf.Business.Activity (Part = self)
];

entity Togaf.Business.Control : Togaf.General.Base
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Control"),
      Edge ( From = self, To = PartOf, Name = Name, TypeName = "AF-Control-Part"),
      Edge2 ( From = PartOf, To = self, Name = Name, TypeName = "AF-Control-Includes") 
{
    URL             : String,
    PartOf          : Togaf.Business.Control
}
[
    Includes        : Togaf.Business.Control (PartOf = self),
    Governs         : Togaf.Business.Process (Governed = self)
];

entity Togaf.Business.ValueStream : Togaf.General.Base
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-ValueStream"),
      Edge ( From = self, To = Parent, Name = Name, TypeName = "AF-ValueStream-Part"),
      Edge2 ( From = Parent, To = self, Name = Name, TypeName = "AF-ValueStream-Includes"), 
      Edge3 ( From = self, To = Enables, Name = Name, TypeName = "AF-ValueStream-Capability"),
      Edge4 ( From = Enables, To = self, Name = Name, TypeName = "AF-Capability-ValueStream"), 
      Edge5 ( From = self, To = Involves, Name = Name, TypeName = "AF-ValueStream-Actor"),
      Edge6 ( From = Involves, To = self, Name = Name, TypeName = "AF-Actor-ValueStream") 
{
    URL             : String,
    Parent          : Togaf.Business.ValueStream,
    Enables         : Togaf.Business.Capability,
    Involves        : Togaf.Business.Actor
}
[
    Children        : Togaf.Business.ValueStream (Parent = self),
    RealizedBy      : Togaf.Business.Process (Realizes = self)
];

entity Togaf.Business.CourseOfAction : Togaf.General.Base
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-CourseOfAction"),
      Edge ( From = self, To = Enables, Name = Name, TypeName = "AF-CourseOfAction-Capability"),
      Edge2 ( From = Enables, To = self, Name = Name, TypeName = "AF-Capability-CourseOfAction"), 
      Edge3 ( From = self, To = Leads, Name = Name, TypeName = "AF-CourseOfAction-Goal"),
      Edge4 ( From = Leads, To = self, Name = Name, TypeName = "AF-Goal-CourseOfAction"), 
      Edge5 ( From = self, To = Leads, Name = Name, TypeName = "AF-CourseOfAction-Function"),
      Edge6 ( From = Leads, To = self, Name = Name, TypeName = "AF-Function-CourseOfAction") 
{
    URL             : String,
    Enables         : Togaf.Business.Capability,
    Leads           : Togaf.Business.Goal,
    Involves        : Togaf.Business.Function
};

/* ********************************************************
    Service
******************************************************** */

entity Togaf.Service : Togaf.General.Base 
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Service"),
      Edge ( From = self, To = OwnedBy, Name = Name, TypeName = "AF-Service-Organization"),
      Edge2 ( From = OwnedBy, To = self, Name = Name, TypeName = "AF-Organization-Service")
{
    OwnedBy         : Togaf.Organization
}
[
    Measures        : Togaf.Business.Measure ( Tracks = self),
    Triggers        : Togaf.Business.Event ( Trigger = self),
    UsedBy          : Togaf.Business.Activity ( Uses = self),
    Provides        : Togaf.Data.Entity(Provider = self),
    ProvidedBy      : Togaf.Application.System ( Realizes = self)
];

/* ********************************************************
    Data
******************************************************** */

entity Togaf.Data.Entity: Togaf.General.Base
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Entity"),
      Edge ( From = self, To = Originator, Name = Name, TypeName = "AF-Entity-Activity"),
      Edge2 ( From = Originator, To = self, Name = Name, TypeName = "AF-Activity-Entity"),
      Edge3 ( From = self, To = Originator, Name = Name, TypeName = "AF-Entity-Activity"),
      Edge4 ( From = Originator, To = self, Name = Name, TypeName = "AF-Activity-Entity")
{
    Originator      : Togaf.Business.Activity,
    Provider        : Togaf.Service
}
[
    Logical         : Togaf.Data.Logical (Encapsulate = self),
    DataUsage       : Togaf.Data.Usage (Entity = self)
];

entity Togaf.Data.Usage : Togaf.Base
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-DataUsage"),
      Edge ( From = self, To = Entity, Name = Name, TypeName = "AF-DataUsage-Entity"),
      Edge2 ( From = Entity, To = self, Name = Name, TypeName = "AF-Entity-DataUsage"),
      Edge3 ( From = self, To = System, Name = Name, TypeName = "AF-DataUsage-System"),
      Edge4 ( From = System, To = self, Name = Name, TypeName = "AF-System-DataUsage")
(
    Entity          : Togaf.Data.Entity,
    System          : Togaf.Application.System
)
{
    Comment         : String
};

entity Togaf.Data.Logical : Togaf.General.Base
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Logical"),
      Edge ( From = self, To = Encapsulate, Name = Name, TypeName = "AF-Logical-Entity"),
      Edge2 ( From = Encapsulate, To = self, Name = Name, TypeName = "AF-Entity-Logical"),
      Edge3 ( From = self, To = Component, Name = Name, TypeName = "AF-Logical-Component"),
      Edge4 ( From = Component, To = self, Name = Name, TypeName = "AF-Component-Logical")
{
    Encapsulate     : Togaf.Data.Entity,
    Component       : Togaf.Application.Component
}
[
    Instantiate     : Togaf.Data.Physical (Instantiate = self)
];

entity Togaf.Data.Physical : Togaf.General.Base
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Physical"),
      Edge ( From = self, To = Instantiate, Name = Name, TypeName = "AF-Physical-Logical"),
      Edge2 ( From = Instantiate, To = self, Name = Name, TypeName = "AF-Logical-Physical"),
      Edge3 ( From = self, To = Deployed, Name = Name, TypeName = "AF-Physical-Deployed"),
      Edge4 ( From = Deployed, To = self, Name = Name, TypeName = "AF-Deployed-Physical")
{
    Instantiate     : Togaf.Data.Logical,
    Deployed        : Togaf.Application.Deployed
};
/* ********************************************************
    Application
******************************************************** */
entity Togaf.Application.System : Togaf.General.Base
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-System"),
      Edge ( From = self, To = Realizes, Name = Name, TypeName = "AF-System-Service"),
      Edge2 ( From = Realizes, To = self, Name = Name, TypeName = "AF-Service-System"),
      Edge3 ( From = self, To = Platform, Name = Name, TypeName = "AF-System-Platform"),
      Edge4 ( From = Platform, To = self, Name = Name, TypeName = "AF-Platform-System")
{
    Realizes        : Togaf.Service,
    Platform        : Togaf.Technology.Platform
}
[
    SystemUsage     : Togaf.Data.Usage (System = self),
    ImplementedBy   : Togaf.Application.Component (Implements = self)
];

entity Togaf.Application.Component: Togaf.General.Base
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Component"),
      Edge ( From = self, To = Implements, Name = Name, TypeName = "AF-Component-System"),
      Edge2 ( From = Implements, To = self, Name = Name, TypeName = "AF-System-Component"),
      Edge3 ( From = self, To = Host, Name = Name, TypeName = "AF-Component-Host"),
      Edge4 ( From = Host, To = self, Name = Name, TypeName = "AF-Host-Component")
{
    Implements      : Togaf.Application.System,
    Host            : Togaf.Technology.Host
}
[
    ComponentUsage  : Togaf.Data.Logical (Component = self),
    DeployedBy      : Togaf.Application.Deployed (Deployes = self)
];

entity Togaf.Application.Deployed : Togaf.General.Base
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Deployed"),
      Edge ( From = self, To = Deployes, Name = Name, TypeName = "AF-Deployed-Component"),
      Edge2 ( From = Deployes, To = self, Name = Name, TypeName = "AF-Component-Deployed"),
      Edge3 ( From = self, To = Host, Name = Name, TypeName = "AF-Deployed-Host"),
      Edge4 ( From = Host, To = self, Name = Name, TypeName = "AF-Host-Deployed")
{
    Deployes        : Togaf.Application.Component,
    Host            : Togaf.Technology.Instance
}
[
    Usage           : Togaf.Data.Physical (Deployed = self)
];

/* ********************************************************
    Technology
******************************************************** */
entity Togaf.Technology.Platform : Togaf.General.Base
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Platform"),
      Edge ( From = self, To = Serves, Name = Name, TypeName = "AF-Platform-Service"),
      Edge2 ( From = Serves, To = self, Name = Name, TypeName = "AF-Service-Platform")
{
    Serves          : Togaf.Service
}
[
    Hosts           : Togaf.Application.System (Platform = self),
    Defines         : Togaf.Technology.Host (Platform = self)
];

entity Togaf.Technology.Host : Togaf.General.Base
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Platform"),
      Edge ( From = self, To = Platform, Name = Name, TypeName = "AF-Host-Platform"),
      Edge2 ( From = Platform, To = self, Name = Name, TypeName = "AF-Platform-Host")
{
    Platform        : Togaf.Technology.Platform
}
[
    Hosts           : Togaf.Application.Component (Host = self),
    Instances       : Togaf.Technology.Instance (Host = self) 
];

entity Togaf.Technology.Instance : Togaf.General.Base
    = Node ( SKey = SKey, Name = Name, TypeName = "AF-Platform"),
      Edge ( From = self, To = Host, Name = Name, TypeName = "AF-Instance-Platform"),
      Edge2 ( From = Host, To = self, Name = Name, TypeName = "AF-Platform-Instance")
{
    Host            : Togaf.Technology.Host
}
[
    Hosts           : Togaf.Application.Deployed (Host = self)
];
